using System.Drawing;
using System.Numerics;
using GameplayPatches;
using ImGuiNET;
namespace DotrModdingTool2IMGUI;

public class GameplayPatchesWindow : IImGuiWindow
{
    ImFontPtr font;
    DataAccess dataAccess = DataAccess.Instance;
    static int LockTeamSelection = 0x1ec7f0; // lock the selection options
    static int LockTeamSelection2 = 0x1ec7d8;
    static int SelectWhiteDefault = 0x1ef260;
    static int MakeWhiteStart = 0x179074; //Makes white always start
    static int changeTeamStart = 0x179074;
    static int ChangeTerrainValues = 0x236590;
    static int MoreDigitsOnScreen = 0x181cd0;

    //BELOW HERE REQUIRE FAST INTRO TO BE ENABLED:
    //Remove Dc Requirements
    static int TaTutoDbgInit34 = 0x145f60;
    static int TaTutoFocusUnit33 = 0x1446f0;
    static int TaTutoFocusInit34 = 0x145ca0;

    //For AI changes
    //Joey Fix
    static int TaTuto_Init036 = 0x24F6B0;

    //Ai not reviving equips
    static int TaTuto_ControlFade = 0x24F990;

    //TutorialStuff
    static int TaTutoSetDeck35 = 0x148420;

    //Slots
    static int AddSlotRewardsPtr = 0x221610;
    static int TaTutoFocusUnit032 = 0x142610;

    //Music
    static int AddCustomMusicPtr = 0x17ac58;
    static int TaTuto_DrawTrapArea = 0x24f800;
    static int AI_Tut_05 = 0x14AB70;

    #region Toggle only

    public bool bAiDoubleTap;
    public bool bFastIntro;
    public bool bUserToggledFastIntro = false;
    public bool bUnlockFusions;
    public bool bCameraFix;
    public bool bExpandedZoom;
    public bool bRemoveExpLoss;
    public bool bRemoveSlotRng;
    public bool bAllCustomDuels;
    public bool bKeepReincarnatedCard;
    public bool bNoDcPostGame;
    public bool bNoDcAllGame;
    public bool bNineCardLimit;
    public bool bToonLeaderLandChange;
    public bool bAllKindsExtraSlots;
    public bool bSaveMusic;

    #endregion

    #region Toggle and value

    public int currentSideToGoFirst;
    string[] sideStrings = { "Lancastrians (red)", "Yorkists (white)" };
    public bool bSideToGoFirst;
    public bool bForceNewStartSide;
    public bool bLpCap;
    public bool bReincarnationCount;
    public bool bTerrainBuff;
    public bool bDeckLeaderRecovery;

    public bool bStartingLpRed;
    public bool bSpRecoveryRed;
    public bool bStartingSpRed;

    public int startingSpRed = 4;
    public int startingLpRed = 4000;
    public int spRecoveryRed = 3;

    public bool bStartingLpWhite;
    public bool bSpRecoveryWhite;
    public bool bStartingSpWhite;
    public int startingSpWhite = 4;
    public int startingLpWhite = 4000;
    public int spRecoveryWhite = 3;

    public int forceSideIndex;
    public int lpCap;
    public int reincarnationCount;
    public int terrainBuffAmount;
    public int leaderRecovery;

    #endregion

    #region CustomSlots

    public bool bSaveCustomSlotRewards;
    Vector4 tableBgColour = UserSettings.CustomSlotTableBgColour;
    Vector4 searchColour = UserSettings.CustomSlotDropdownColour;

    #endregion

    #region AIPatches

    bool bFixDarkHole;
    bool bMaiFeatherDuster;
    bool bFixGetMaxApList;
    bool bMakoHeavyStorm;
    bool bStopPegasusFusion;
    bool bDmkFixRevive;
    bool bDontReviveEquips;
    bool bGiveJoeyReviveMission;
    bool bYugiRaigeki;
    bool bTeaInsectImitation;

    #endregion

    public int[] SpecialThreeInARows = Enumerable.Repeat(671, 30).ToArray();
    public int[] SpecialSlotRewards = Enumerable.Repeat(0, 30).ToArray();
    string filteredStringThreeInARow = "";
    string filteredStringReward = "";

    #region Exp Mods

    Vector2 rankImageSize = new Vector2(72, 72);
    public static int[] rankExp = new int[12];

    public static string[] RankNames = new string[13] {
        "NCO",
        "2LT",
        "1LT",
        "CPT",
        "MAJ",
        "LTC",
        "COL",
        "BG",
        "RADM",
        "VADM",
        "ADM",
        "SADM",
        "SD"
    };

    #endregion

    public static GameplayPatchesWindow Instance { get; private set; }

    public GameplayPatchesWindow()
    {
        Instance = this;
        font = Fonts.MonoSpace;
        EditorWindow.OnIsoLoaded += OnIsoLoaded;
        MusicEditorWindow.OnSaveCustomMusic += onSaveMusicChanged;
    }

    void onSaveMusicChanged(bool saveMusic)
    {
        bSaveMusic = saveMusic;
    }

    void OnIsoLoaded()
    {
        SpecialThreeInARows = Enumerable.Repeat(671, 30).ToArray();
        SpecialSlotRewards = Enumerable.Repeat(0, 30).ToArray();
        ReadGameplayPatchesFromIso();

    }

    public void Render()
    {
        Vector2 windowSize = ImGui.GetWindowSize();
        ImGui.PushFont(font);
        if (!dataAccess.IsIsoLoaded)
        {
            ImGui.Text("Please load ISO file");
            ImGui.PopFont();
            return;
        }
        ImGui.PushStyleColor(ImGuiCol.TabSelected, new GuiColour(0, 189, 0).value);
        ImGui.PushStyleColor(ImGuiCol.TabHovered, new GuiColour(128, 128, 0).value);
        if (ImGui.BeginTabBar("PatchesTabBar"))
        {
            if (ImGui.BeginTabItem("Mechanic patches"))
            {
                DrawBoolPatches(windowSize);
                ImGui.SameLine();
                DrawValuePatches(windowSize);
                ImGui.EndTabItem();
            }
            if (ImGui.BeginTabItem("Custom Slot Rares"))
            {
                DrawCustomSlotRewards();
                ImGui.EndTabItem();
            }

            if (ImGui.BeginTabItem("Rank Exp Editor"))
            {

                RenderExpEditor();
                ImGui.EndTabItem();
            }
            ImGui.EndTabBar();
        }
        ImGui.PopStyleColor(2);



        ImGui.PopFont();

    }

    void RenderExpEditor()
    {
        ImGui.BeginChild("Rank Thresholds", new Vector2(ImGui.GetContentRegionAvail().X / 4, ImGui.GetContentRegionAvail().Y));
        ImGui.Text("Rank Thresholds");
        if (ImGui.BeginTable("RankThreshold", 3,
                ImGuiTableFlags.Borders | ImGuiTableFlags.SizingFixedFit | ImGuiTableFlags.NoHostExtendX | ImGuiTableFlags.Resizable))
        {
            ImGui.TableSetupColumn("Img");
            ImGui.TableSetupColumn("Rank");
            ImGui.TableSetupColumn("Exp");
            ImGui.TableHeadersRow();

            for (int i = 0; i < 12; i++)
            {
                ImGui.TableNextRow();
                ImGui.TableSetColumnIndex(0);

                ImGui.Image(GlobalImages.Instance.LeaderRanks[(DeckLeaderRank)i + 1], rankImageSize);
                ImGui.TableSetColumnIndex(1);
                ImGui.Text(RankNames[i + 1]);
                ImGui.TableSetColumnIndex(2);
                ImGui.PushItemWidth(ImGui.CalcTextSize("655350").X);
                if (ImGui.InputInt($"##Exp{i}", ref rankExp[i], 0))
                {
                    rankExp[i] = Math.Clamp(rankExp[i], 0, 65535);
                }

            }
            ImGui.EndTable();
        }

        ImGui.EndChild();
        ImGui.SameLine();
        ImGui.BeginChild("Exp Per Action/Event", ImGui.GetContentRegionAvail());

        ImGui.Text("Exp Per Action/Event");
        ImGui.TextColored(new GuiColour(Color.Orange).value, "Coming soon");
        ImGui.EndChild();

    }

    void DrawCustomSlotRewards()
    {
        if (ImGui.Checkbox("Save Custom Slot Rewards", ref bSaveCustomSlotRewards))
        {
            bFastIntro = true;
        }
        if (ImGui.IsItemHovered())
        {
            ImGui.SetTooltip("Requires Fast Intro");
        }
        if (ImGui.ColorEdit4("Table Background", ref tableBgColour, ImGuiColorEditFlags.AlphaBar | ImGuiColorEditFlags.NoInputs))
        {
            UserSettings.CustomSlotTableBgColour = tableBgColour;
        }

        ImGui.SameLine();
        if (ImGui.ColorEdit4("Search Dropdown", ref searchColour, ImGuiColorEditFlags.AlphaBar | ImGuiColorEditFlags.NoInputs))
        {
            UserSettings.CustomSlotDropdownColour = searchColour;
        }
        ImGui.PushStyleColor(ImGuiCol.TableRowBg, tableBgColour);
        ImGui.PushStyleColor(ImGuiCol.TableRowBgAlt, tableBgColour);
        ImGui.PushStyleColor(ImGuiCol.FrameBg, tableBgColour);
        ImGui.PushStyleColor(ImGuiCol.Button, tableBgColour);
        ImGui.PushStyleColor(ImGuiCol.PopupBg, searchColour);
        if (ImGui.BeginTable("##CustomSlotRewardsTable", 3, ImGuiTableFlags.Resizable | ImGuiTableFlags.Reorderable | ImGuiTableFlags.Hideable |
                                                            ImGuiTableFlags.Sortable |
                                                            ImGuiTableFlags.SortMulti | ImGuiTableFlags.BordersV | ImGuiTableFlags.RowBg |
                                                            ImGuiTableFlags.Borders |
                                                            ImGuiTableFlags.ScrollX |
                                                            ImGuiTableFlags.ScrollY |
                                                            ImGuiTableFlags.BordersInnerH))
        {

            ImGui.TableSetupColumn("Id", ImGuiTableColumnFlags.WidthFixed, ImGui.CalcTextSize("IDX").X + 10);
            ImGui.TableSetupColumn("Three in a row", ImGuiTableColumnFlags.WidthStretch);
            ImGui.TableSetupColumn("Reward", ImGuiTableColumnFlags.WidthStretch);
            ImGui.TableHeadersRow();

            for (int i = 0; i < 30; i++)
            {
                ImGui.TableNextRow();
                ImGui.TableSetColumnIndex(0);
                ImGui.Text(i.ToString());
                ImGui.TableSetColumnIndex(1);
                ImGui.PushItemWidth(-1);
                List<string> filteredListThree = Card.cardNameList.Where(s => s.Contains(filteredStringThreeInARow, StringComparison.OrdinalIgnoreCase))
                    .ToList();
                if (ImGui.BeginCombo($"##ThreeInARow{i}", Card.cardNameList[SpecialThreeInARows[i]], ImGuiComboFlags.HeightLarge))
                {
                    ImGui.PushItemWidth(-1);
                    ImGui.PushStyleColor(ImGuiCol.FrameBg, searchColour);
                    ImGui.InputText($"##ThreeInARowSearch{i}", ref filteredStringThreeInARow, 32);
                    ImGui.PopStyleColor();
                    foreach (var cardName in filteredListThree)
                    {
                        int index = Array.IndexOf(Card.cardNameList, cardName);
                        bool isSelected = SpecialThreeInARows[i] == index;
                        if (ImGui.Selectable(cardName, isSelected))
                        {
                            SpecialThreeInARows[i] = index;
                            filteredStringThreeInARow = "";
                        }
                        if (ImGui.IsItemHovered())
                        {
                            ImGui.BeginTooltip();
                            GlobalImgui.RenderTooltipCardImage(cardName);
                            ImGui.EndTooltip();
                        }
                    }
                    ImGui.EndCombo();
                }
                if (ImGui.IsItemHovered())
                {
                    GlobalImgui.RenderTooltipCardImage(Card.cardNameList[SpecialThreeInARows[i]]);

                }
                ImGui.TableSetColumnIndex(2);
                ImGui.PushItemWidth(-1);

                List<string> filteredList = Card.cardNameList.Where(s => s.Contains(filteredStringReward, StringComparison.OrdinalIgnoreCase)).ToList();
                if (ImGui.BeginCombo($"##Reward{i}", Card.cardNameList[SpecialSlotRewards[i]], ImGuiComboFlags.HeightLarge))
                {
                    ImGui.PushItemWidth(-1);
                    ImGui.InputText($"##RewardSearch{i}", ref filteredStringReward, 32);
                    foreach (var cardName in filteredList)
                    {
                        int index = Array.IndexOf(Card.cardNameList, cardName);
                        bool isSelected = SpecialSlotRewards[i] == index;
                        if (ImGui.Selectable(cardName, isSelected))
                        {
                            SpecialSlotRewards[i] = index;
                            filteredStringReward = "";
                        }
                        if (ImGui.IsItemHovered())
                        {
                            ImGui.BeginTooltip();
                            GlobalImgui.RenderTooltipCardImage(cardName);
                            ImGui.EndTooltip();
                        }
                    }
                    ImGui.EndCombo();
                }
                if (ImGui.IsItemHovered())
                {
                    ImGui.BeginTooltip();
                    ImGui.Image(GlobalImages.Instance.Cards[Card.cardNameList[SpecialSlotRewards[i]]], new Vector2(128, 128));
                    ImGui.EndTooltip();
                }
            }
            ImGui.EndTable();
        }
        ImGui.PopStyleColor(5);
    }


    void DrawValuePatches(Vector2 windowSize)
    {

        ImGui.BeginChild("RightHalfPanel", new Vector2(windowSize.X / 2f, ImGui.GetContentRegionAvail().Y),
            ImGuiChildFlags.Border | ImGuiChildFlags.AlwaysAutoResize);
        ImGui.Text("Value based patches");
        ImGui.Separator();
        ImGui.Checkbox("Side to go first", ref bSideToGoFirst);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Which team gets to play cards first");
        if (bSideToGoFirst)
        {
            if (ImGui.ListBox("##SideToGoFirst", ref currentSideToGoFirst, sideStrings, 2))
            {
                currentSideToGoFirst = Math.Clamp(currentSideToGoFirst, 0, 1);
            }
        }
        ImGui.Checkbox("Force new game side", ref bForceNewStartSide);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("When starting a new campaign force the player to pick a particular side");
        if (bForceNewStartSide)
        {
            if (ImGui.ListBox("##forceNewGameSide", ref forceSideIndex, sideStrings, 2))
            {
                forceSideIndex = Math.Clamp(forceSideIndex, 0, 1);
            }
        }

        ImGui.Checkbox("Change LP cap", ref bLpCap);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Exceed the 9999 LP Cap");
        if (bLpCap)
        {
            lpCap = Math.Clamp(lpCap, 9999, 32000);
            ImGui.InputInt("##lpCap", ref lpCap, 100, 1000);
        }

        ImGui.Checkbox("Change reincarnation count", ref bReincarnationCount);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("The number of battles required before you reincarnate");
        if (bReincarnationCount)
        {
            ImGui.SliderInt("##changeReincarnationCount", ref reincarnationCount, 1, 100);
        }


        ImGui.Checkbox("Change terrain buff amount", ref bTerrainBuff);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("How much bonus ATK and DEF cards get on favourable Terrain");
        if (bTerrainBuff)
        {
            terrainBuffAmount = Math.Clamp(terrainBuffAmount, 0, 9999);
            ImGui.InputInt("##terrainBuff", ref terrainBuffAmount, 100);
        }


        ImGui.Checkbox("Change deck leader recovery amount", ref bDeckLeaderRecovery);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Changes the amount that the deck leader ability LP Recovery gives at the end of a turn");
        if (bDeckLeaderRecovery)
        {
            leaderRecovery = Math.Clamp(leaderRecovery, 50, 9999);
            ImGui.InputInt("##leaderRecovery", ref leaderRecovery, 50);
        }

        ImGui.Checkbox("Change red starting lp", ref bStartingLpRed);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Changes initial LP for Red/Lancasters");
        if (bStartingLpRed)
        {
            startingLpRed = Math.Clamp(startingLpRed, 1, lpCap);
            ImGui.InputInt("##startingLpRed", ref startingLpRed, 50);
        }

        ImGui.Checkbox("Change white starting lp", ref bStartingLpWhite);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Changes initial LP for White/Yorkists");
        if (bStartingLpWhite)
        {
            startingLpWhite = Math.Clamp(startingLpWhite, 1, lpCap);
            ImGui.InputInt("##startingLpWhite", ref startingLpWhite, 50);
        }

        ImGui.Checkbox("Change red starting SP", ref bStartingSpRed);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Changes initial SP for Red/Lancasters");
        if (bStartingSpRed)
        {
            startingSpRed = Math.Clamp(startingSpRed, 0, 12);
            ImGui.SliderInt("##startingSpRed", ref startingSpRed, 0, 12);
        }

        ImGui.Checkbox("Change white starting SP", ref bStartingSpWhite);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Changes initial SP for White/Yorkists");
        if (bStartingSpWhite)
        {
            startingSpWhite = Math.Clamp(startingSpWhite, 0, 12);
            ImGui.SliderInt("##startingSpWhite", ref startingSpWhite, 0, 12);
        }

        ImGui.Checkbox("Change red SP recovery", ref bSpRecoveryRed);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Changes SP per turn for Red/Lancasters");
        if (bSpRecoveryRed)
        {
            spRecoveryRed = Math.Clamp(spRecoveryRed, 0, 12);
            ImGui.SliderInt("##SpRecoveryRed", ref spRecoveryRed, 0, 12);
        }

        ImGui.Checkbox("Change white SP recovery", ref bSpRecoveryWhite);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Changes SP per turn for White/Yorkists");
        if (bSpRecoveryWhite)
        {
            spRecoveryWhite = Math.Clamp(spRecoveryWhite, 0, 12);
            ImGui.SliderInt("##SpRecoveryWhite", ref spRecoveryWhite, 0, 12);
        }
        ImGui.EndChild();
    }

    void DrawBoolPatches(Vector2 windowSize)
    {
        ImGui.BeginChild("LeftHalfPanel", new Vector2(windowSize.X / 2f, ImGui.GetContentRegionAvail().Y),
            ImGuiChildFlags.Border | ImGuiChildFlags.AlwaysAutoResize);
        ImGui.Text("On/Off patches");
        ImGui.Separator();
        if (ImGui.Checkbox("Fast intro", ref bFastIntro))
        {
            bUserToggledFastIntro = !bUserToggledFastIntro;
        }
        if (ImGui.IsItemHovered())
            ImGui.SetTooltip("Skips unneeded cutscenes when starting a new campaign\nRemoves the tutorial to allow space for new mods");

        ImGui.Checkbox("Remove AI double tap", ref bAiDoubleTap);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("The AI no longer path and double selects cards it does not intend to move");

        ImGui.Checkbox("Emulator camera fix", ref bCameraFix);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Prevents the camera from reaching number that creates a rounding error in the emulator");

        ImGui.Checkbox("Expanded zoom", ref bExpandedZoom);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Increases the min and max zoom distance");

        ImGui.Checkbox("Allow fusions with non equip cards", ref bUnlockFusions);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Allows fusions between any 2 cards types as long as they are not power ups");

        ImGui.Checkbox("Remove Exp loss", ref bRemoveExpLoss);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Cards no longer lose any exp ever");

        ImGui.Checkbox("Remove slot rng", ref bRemoveSlotRng);
        if (ImGui.IsItemHovered())
        {
            ImGui.BeginTooltip();
            ImGui.Text(
                "Slots usually wait a random number of frames after pressing the button to stop\nThis removes the random number of frames to wait");
            ImGui.TextColored(new GuiColour(Color.Red).value, "Warning this in rare scenarios may cause a card in the slots to become unobtainable");
            ImGui.EndTooltip();
        }

        ImGui.Checkbox("All custom duels", ref bAllCustomDuels);
        if (ImGui.IsItemHovered())
        {
            ImGui.BeginTooltip();
            ImGui.Text("Allows you to vs all Deck masters in the custom duel pre campaign completion");
            ImGui.Text("Allows you to vs all Duelists in the custom duel post campaign completion");
            ImGui.EndTooltip();
        }

        ImGui.Checkbox("Keep reincarnated cards", ref bKeepReincarnatedCard);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Dont lose the card you reincarnate");

        ImGui.Checkbox("Toon leaders land change to toon", ref bToonLeaderLandChange);
        if (ImGui.IsItemHovered())
            ImGui.SetTooltip(
                "If a deck leader that has the Terrain Change leader ability is strong on toon\nit will create toon for its ability instead");

        if (ImGui.Checkbox("No DC requirements post game", ref bNoDcPostGame))
        {
            bNoDcAllGame = false;
        }
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("After beating the campaign you can battle whoever regardless of your Deck Cost");

        if (ImGui.Checkbox("No DC requirements at all", ref bNoDcAllGame))
        {
            bNoDcPostGame = false;
        }
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Completely Removes DC requirements");

        ImGui.Checkbox("Removes Card limit in deck ", ref bNineCardLimit);
        if (ImGui.IsItemHovered())
            ImGui.SetTooltip("Changes the limit from 3 to 9 (max ownable copies)");

        ImGui.Checkbox("All kinds can get extra slots ability", ref bAllKindsExtraSlots);
        if (ImGui.IsItemHovered())
            ImGui.SetTooltip("Fixes the hardcoded issue of only allowing specific Kinds to properly use the Extra Slots Ability ");

        ImGui.Separator();
        ImGui.Text("AI Patches");
        ImGui.Checkbox("Fix Dark Hole Usage", ref bFixDarkHole);
        if (ImGui.IsItemHovered())
            ImGui.SetTooltip("Fixes bug that defaults its usage to true");

        ImGui.Checkbox("Improved Feather Duster Usage", ref bMaiFeatherDuster);
        if (ImGui.IsItemHovered())
            ImGui.SetTooltip("Will use HFD if it can destroy an opponents spell card and it only destroys 2 or less of her cards");

        ImGui.Checkbox("Correctly calculate Max Attack", ref bFixGetMaxApList);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Several bug fixes that caused garbage data to be calculated");

        ImGui.Checkbox("Heavy storm rework", ref bMakoHeavyStorm);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Will use heavy storm when the player has more spells than mako ");

        ImGui.Checkbox("DMK will select from correct graveyard", ref bDmkFixRevive);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Fixes an issue where DMK could only revive from one graveyard");

        ImGui.Checkbox("Stop Pegasus from fusing", ref bStopPegasusFusion);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Because pegasus often fuses away his strong effect monsters or monsters that are good on toon ");

        ImGui.Checkbox("Stop AI from reviving Equips", ref bDontReviveEquips);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Because the AI does not use equips on the board properly");

        ImGui.Checkbox("Give Joey Revive Mission for copycat", ref bGiveJoeyReviveMission);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Fixes a bug that stopped Joey from interacting with copycat");
        ImGui.Checkbox("Fix Yugi Raigeki use", ref bYugiRaigeki);
        if (ImGui.IsItemHovered()) ImGui.SetTooltip("Fixes a bug where Yugi swaps the comparison of cards when checking to using raigeki");



        ImGui.Checkbox("Make Tea use insect imitation", ref bTeaInsectImitation);

        bFastIntro = IsUsingFastIntroMods();
        ImGui.EndChild();
    }


    public void ReadGameplayPatchesFromIso()
    {

        bUserToggledFastIntro = new FastIntro().IsApplied();
        bAiDoubleTap = new AIFasterTurnPassing().IsApplied();
        bCameraFix = new EmulatorCameraFix().IsApplied();
        bExpandedZoom = new ExpandedZoom().IsApplied();
        bRemoveSlotRng = new RemoveRNGFromSlots().IsApplied();
        bAllCustomDuels = new AllowAllCustomDuels().IsApplied();
        bRemoveExpLoss = new NoNegativeXP().IsApplied();

        bNoDcPostGame = new RemoveDCRequirementsPostGame().IsApplied();
        bKeepReincarnatedCard = new KeepReincarnatedCard().IsApplied();
        bUnlockFusions = dataAccess.CheckIfPatchApplied(Patcher.AllowAllHandFusions.Offset, Patcher.AllowAllHandFusions.Patch) ||
                         dataAccess.CheckIfPatchApplied(Patcher.AllowAllFieldFusions.Offset, Patcher.AllowAllFieldFusions.Patch);

        bToonLeaderLandChange = new ToonLeadersMovePatch().IsApplied();
        bAllKindsExtraSlots = new AllKindsExtraCardLeaderAbility().IsApplied();
        bNineCardLimit = new ExtendedCardCopyLimitPatch().IsApplied();
        bNoDcAllGame = new RemoveDCRequirementsGeneral().IsApplied();
        bNoDcPostGame = new RemoveDCRequirementsPostGame().IsApplied();
        ReadValuesFromIso();
        ReadAiPatches();
    }

    void ReadAiPatches()
    {
        bFixDarkHole = new AiFixDarkhole().IsApplied();
        bMaiFeatherDuster = new FixFeatherDusterUsage().IsApplied();
        bFixGetMaxApList = new AiFixGetMaxApAndCtlList().IsApplied();
        bMakoHeavyStorm = new AiFixMakoHeavyStorm().IsApplied();
        bStopPegasusFusion = new AiPegasusNoFusions().IsApplied();
        bDmkFixRevive = new AiDMKFixRevive().IsApplied();
        bDontReviveEquips = new AiVanillaNoReviveEquips().IsApplied();
        bGiveJoeyReviveMission = new AiGiveJoeyReviveMission().IsApplied();
        bYugiRaigeki = new AiFixYugiRaigeki().IsApplied();
        bTeaInsectImitation = new AiFixTeaInsectImitation().IsApplied();
    }


    void ReadValuesFromIso()
    {
        bDeckLeaderRecovery = !dataAccess.CheckIfPatchApplied(0x24268C, new byte[4] { 0x32, 0x00, 0x04, 0x24 });
        if (bDeckLeaderRecovery)
        {
            leaderRecovery = BitConverter.ToInt16(dataAccess.ReadBytes(0x24268C, 2), 0);
        }
        bSideToGoFirst = dataAccess.CheckIfPatchApplied(0x1a7b08, new byte[4] { 0x00, 0xff, 0x23, 0x92 });
        if (bSideToGoFirst)
        {
            byte[] value = dataAccess.ReadBytes(changeTeamStart + 28, 1);
            currentSideToGoFirst = Convert.ToInt32(value[0]);
        }
        //Check New Game Side
        bForceNewStartSide = dataAccess.CheckIfPatchApplied(LockTeamSelection2, new byte[4] { 0x01, 0x00, 0x05, 0x24 });
        if (bForceNewStartSide)
        {
            int WhiteTeamForce = dataAccess.ReadBytes(LockTeamSelection + 2, 1)[0];
            if (WhiteTeamForce == 0x20)
            {
                int RedTeamForce = dataAccess.ReadBytes(LockTeamSelection - 2, 1)[0];
                if (RedTeamForce == 0x20)
                {
                    if (ImGui.BeginPopupModal("Error", ImGuiWindowFlags.AlwaysAutoResize))
                    {
                        ImGui.Text("This has a patched jump with vanilla bytes");

                        if (ImGui.Button("OK", new Vector2(120, 0)))
                        {
                            ImGui.CloseCurrentPopup();
                        }
                        ImGui.EndPopup();
                    }
                }
                else
                {
                    forceSideIndex = 0;
                }
            }
            else
            {
                forceSideIndex = 1;
            }
        }
        int CapValue = BitConverter.ToUInt16(dataAccess.ReadBytes(0x2209d4, 2), 0);
        if (CapValue != 10000)
        {
            bLpCap = true;
            lpCap = CapValue - 1;
        }
        else
        {
            bLpCap = false;
            lpCap = 9999;
        }
        int reincarnationAmount = dataAccess.ReadBytes(Patcher.ChangeReincarnationAmount.Offset, 1)[0];
        if (reincarnationAmount != 5)
        {
            bReincarnationCount = true;

        }
        else
        {
            bReincarnationCount = false;
        }
        reincarnationCount = reincarnationAmount;
        bTerrainBuff = !dataAccess.CheckIfPatchApplied(ChangeTerrainValues,
            new byte[16] { 0x0c, 0xfe, 0xb5, 0x26, 0x01, 0x00, 0x03, 0x24, 0x04, 0x00, 0x43, 0x50, 0xf4, 0x01, 0xb5, 0x26 });
        if (bTerrainBuff)
        {
            terrainBuffAmount = Math.Abs(BitConverter.ToInt16(dataAccess.ReadBytes(ChangeTerrainValues, 2), 0));
        }
        else
        {
            terrainBuffAmount = 500;
        }

        bStartingLpRed = new ChangeStartingLp().IsApplied();
        if (bStartingLpRed)
        {
            startingLpRed = BitConverter.ToInt16(dataAccess.ReadBytes(ChangeStartingLp.patchLocationRed, 2), 0);
        }
        bStartingSpRed = new ChangeStartingSp().IsApplied();
        if (bStartingSpRed)
        {
            startingSpRed = BitConverter.ToInt16(dataAccess.ReadBytes(ChangeStartingSp.patchLocationRed, 2), 0);
        }
        bSpRecoveryRed = new ChangeSpRecovery().IsApplied();
        if (bSpRecoveryRed)
        {
            spRecoveryRed = BitConverter.ToInt16(dataAccess.ReadBytes(ChangeSpRecovery.patchLocationRed, 2), 0);
        }
        bSpRecoveryWhite = new ChangeSpRecovery().IsApplied();
        if (bSpRecoveryWhite)
        {
            spRecoveryWhite = BitConverter.ToInt16(dataAccess.ReadBytes(ChangeSpRecovery.patchLocationWhite, 2), 0);
        }

        bStartingLpWhite = new ChangeStartingLp().IsApplied();
        if (bStartingLpWhite)
        {
            startingLpWhite = BitConverter.ToInt16(dataAccess.ReadBytes(ChangeStartingLp.patchLocationWhite, 2), 0);
        }
        bStartingSpWhite = new ChangeStartingSp().IsApplied();
        if (bStartingSpWhite)
        {
            startingSpWhite = BitConverter.ToInt16(dataAccess.ReadBytes(ChangeStartingSp.patchLocationWhite, 2), 0);
        }


        bSaveCustomSlotRewards = dataAccess.CheckIfPatchApplied(AddSlotRewardsPtr, new byte[8] { 0x44, 0xc9, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00 });
        if (bSaveCustomSlotRewards)
        {
            byte[] bytes = dataAccess.ReadBytes(TaTutoFocusUnit032, 768);
            int j = 0;
            for (int i = 24; j < 30; i += 12)
            {
                byte[] valueBytes = new byte[2];
                Array.Copy(bytes, i, valueBytes, 0, 2);
                SpecialThreeInARows[j] = BitConverter.ToUInt16(valueBytes, 0);
                j++;
            }
            j = 0;
            for (int i = 400; j < 30; i += 12)
            {
                byte[] valueBytes = new byte[2];
                Array.Copy(bytes, i, valueBytes, 0, 2);
                SpecialSlotRewards[j] = BitConverter.ToUInt16(valueBytes, 0);
                j++;
            }
        }

    }

    public void Free()
    {

    }

    public void ApplyPatches()
    {
        if (IsUsingFastIntroMods() || bFastIntro)
        {
            bFastIntro = true;
            NopTutorialsForOtherMods();
        }
        else
        {
            bFastIntro = false;
            RestoreNoppedTutorials();
        }
        new FastIntro().ApplyOrRemove(bFastIntro);
        new AIFasterTurnPassing().ApplyOrRemove(bAiDoubleTap);


        if (bUnlockFusions)
        {
            Patcher.applyPatch(Patcher.AllowAllHandFusions);
            Patcher.applyPatch(Patcher.AllowAllFieldFusions);
        }
        else
        {
            if (Patcher.CheckIfPatchApplied(Patcher.AllowAllHandFusions) || Patcher.CheckIfPatchApplied(Patcher.AllowAllFieldFusions))
            {
                Patcher.undoPatch(Patcher.AllowAllHandFusions);
                Patcher.undoPatch(Patcher.AllowAllFieldFusions);
            }
        }

        new EmulatorCameraFix().ApplyOrRemove(bCameraFix);
        new ExpandedZoom().ApplyOrRemove(bExpandedZoom);
        new NoNegativeXP().ApplyOrRemove(bRemoveExpLoss);
        new RemoveRNGFromSlots().ApplyOrRemove(bRemoveSlotRng);
        new ToonLeadersMovePatch().ApplyOrRemove(bToonLeaderLandChange);
        new AllowAllCustomDuels().ApplyOrRemove(bAllCustomDuels);
        new KeepReincarnatedCard().ApplyOrRemove(bKeepReincarnatedCard);
        new ExtendedCardCopyLimitPatch().ApplyOrRemove(bNineCardLimit);
        new RemoveDCRequirementsPostGame().ApplyOrRemove(bNoDcPostGame);
        new AllKindsExtraCardLeaderAbility().ApplyOrRemove(bAllKindsExtraSlots);
        new RemoveDCRequirementsGeneral().ApplyOrRemove(bNoDcAllGame);

        ApplyValuePatches();

        new AiFixDarkhole().ApplyOrRemove(bFixDarkHole);
        new FixFeatherDusterUsage().ApplyOrRemove(bMaiFeatherDuster);
        new AiFixGetMaxApAndCtlList().ApplyOrRemove(bFixGetMaxApList);
        new AiFixMakoHeavyStorm().ApplyOrRemove(bMakoHeavyStorm);
        new AiDMKFixRevive().ApplyOrRemove(bDmkFixRevive);
        new AiPegasusNoFusions().ApplyOrRemove(bStopPegasusFusion);
        new AiVanillaNoReviveEquips().ApplyOrRemove(bDontReviveEquips);
        new AiGiveJoeyReviveMission().ApplyOrRemove(bGiveJoeyReviveMission);
        new AiFixYugiRaigeki().ApplyOrRemove(bYugiRaigeki);
        new AiFixTeaInsectImitation().ApplyOrRemove(bTeaInsectImitation);
        SaveCustomSlots();
    }

    void ApplyValuePatches()
    {
        if (bSideToGoFirst)
        {

            byte sideByte = Convert.ToByte(currentSideToGoFirst);
            //Makes White go first
            //Moves the first 7 instructions up 2 bytes to fill spares nops
            //Then the next two instructions(8th and 9th): first one loads 1 into s6, (change 0X,00,16,24 to change which team starts first)
            //Second one stores the value of s6 into s0 + 0xf92 which is TurnFirst variable
            dataAccess.ApplyPatch(MakeWhiteStart, new byte[36] {
                0x10, 0x28, 0x00, 0x00,
                0x40, 0x79, 0x07, 0x0c,
                0x01, 0x00, 0x04, 0x24,
                0x3c, 0x01, 0x04, 0x8e,
                0x40, 0x01, 0x05, 0x8e,
                0x40, 0xb7, 0x06, 0x0c,
                0x28, 0x36, 0x40, 0x72,
                sideByte, 0x00, 0x16, 0x24,
                0x92, 0x0f, 0x16, 0xa2
            });
            //Patching duel act to compare what side the player is and not who went first
            dataAccess.ApplyPatch(0x1a7b08, new byte[4] { 0x00, 0xff, 0x23, 0x92 });
        }
        else
        {
            dataAccess.ApplyPatch(MakeWhiteStart,
                new byte[36] {
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x28, 0x00, 0x00, 0x40, 0x79, 0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x3c, 0x01,
                    0x04, 0x8e, 0x40, 0x01, 0x05, 0x8e, 0x40, 0xb7, 0x06, 0x0c, 0x28, 0x36, 0x40, 0x72
                });
            dataAccess.ApplyPatch(0x1a7b08, new byte[4] { 0x52, 0x0d, 0x23, 0x92 });
        }
        if (bForceNewStartSide)
        {
            //loads 1 into a1
            dataAccess.ApplyPatch(LockTeamSelection2, new byte[4] { 0x01, 0x00, 0x05, 0x24 });

            if (forceSideIndex == 1)
            {
                //Loads a1 into has beaten White side
                dataAccess.ApplyPatch(LockTeamSelection, new byte[4] { 0x02, 0x00, 0x25, 0xa2 });
                dataAccess.ApplyPatch(0x1ef058, new byte[4] { 0x00, 0x00, 0x18, 0x24 });

                //Unpatch if they previous version had Red forced first
                dataAccess.ApplyPatch(LockTeamSelection - 4, new byte[4] { 0x01, 0x00, 0x20, 0xa2 });
            }
            else
            {
                //Loads a1 into has beaten red side
                dataAccess.ApplyPatch(LockTeamSelection - 4, new byte[4] { 0x01, 0x00, 0x25, 0xa2 });
                dataAccess.ApplyPatch(0x1ef058, new byte[4] { 0x01, 0x00, 0x18, 0x24 });
                //Unpatch if they previous version had white forced first
                dataAccess.ApplyPatch(LockTeamSelection, new byte[4] { 0x02, 0x00, 0x20, 0xa2 });
            }

        }
        //This can be called when fast Intro is enabled but not this.
        else
        {
            //Revert Team locking
            dataAccess.ApplyPatch(LockTeamSelection2, new byte[4] { 0x94, 0x01, 0x05, 0x24 });
            dataAccess.ApplyPatch(LockTeamSelection, new byte[4] { 0x02, 0x00, 0x20, 0xa2 });
            dataAccess.ApplyPatch(LockTeamSelection - 4, new byte[4] { 0x01, 0x00, 0x20, 0xa2 });
            //If Fast is enabled patch default selection
            if (bFastIntro)
            {
                dataAccess.ApplyPatch(0x1ef058, new byte[4] { 0x01, 0x00, 0x18, 0x24 });
            }
            //Otherwise if its disabled DO NOTHING as fast intro will clean this area up. As this space is in fast intro's


        }

        if (bLpCap)
        {
            if (lpCap > 9999)
            {
                //Allow 5 digits on UI
                dataAccess.ApplyPatch(MoreDigitsOnScreen, new byte[4] { 0x05, 0x00, 0x07, 0x24 });

                //Move player details box y pos
                dataAccess.ApplyPatch(0x1814b4, new byte[4] { 0x14, 0x00, 0x04, 0x24 });

                //Move Player name tag
                dataAccess.ApplyPatch(0x181ce4, new byte[4] { 0x94, 0x00, 0x03, 0x24 });

                //Move allignment (not needed anymore but could be useful in future)
                //Mem.PatchEx(0x201b1c64, "\x1c\x00\xf0\x26", 4);

                //offset white rose x pos left
                dataAccess.ApplyPatch(0x1814f8, new byte[4] { 0x90, 0x01, 0x06, 0x24 });

                //Move Player Picture Right
                //Mem.PatchEx(0x201b1b34, "\x18\x00\xa3\x26", 4);
                dataAccess.ApplyPatch(0x181c2c, new byte[4] { 0x94, 0x00, 0x02, 0x24 });

                // make LP background box wider
                dataAccess.ApplyPatch(0x181c9c, new byte[4] { 0x0e, 0x00, 0x08, 0x24 });

                //Make UI Wider
                dataAccess.ApplyPatch(0x181bfc, new byte[4] { 0x2a, 0x00, 0x0a, 0x24 });
                //Make UI Taller
                //Mem.PatchEx(0x201b1b00, "\x10\x00\x0b\x24", 4);
            }
            //Changes stat cap function
            byte[] CapBytes = BitConverter.GetBytes((int)lpCap + 1);
            byte[] SetBytes = BitConverter.GetBytes((int)lpCap);
            //Changes the if check from 9999 to value
            dataAccess.ApplyPatch(0x2209d4, new byte[4] { CapBytes[0], CapBytes[1], 0x81, 0x28 });
            dataAccess.ApplyPatch(0x2209e0, new byte[4] { CapBytes[0], CapBytes[1], 0x81, 0x28 });
            //changes the assignment to value -1
            dataAccess.ApplyPatch(0x2209ec, new byte[4] { SetBytes[0], SetBytes[1], 0x04, 0x24 });
            //Changes SzDuel_CalcLP function
            //Changes the if check from 9999 to value
            dataAccess.ApplyPatch(0x1af61c, new byte[4] { CapBytes[0], CapBytes[1], 0x41, 0x28 });
            //changes the assignment to to value -1
            dataAccess.ApplyPatch(0x1af624, new byte[4] { SetBytes[0], SetBytes[1], 0x06, 0x24 });
        }
        else
        {
            //Force 4 digits ui
            dataAccess.ApplyPatch(MoreDigitsOnScreen, new byte[4] { 0x04, 0x00, 0x07, 0x24 });
            dataAccess.ApplyPatch(0x1814b4, new byte[4] { 0x14, 0x00, 0x04, 0x24 });
            dataAccess.ApplyPatch(0x181ce4, new byte[4] { 0x7f, 0x00, 0x03, 0x24 });
            dataAccess.ApplyPatch(0x1814f8, new byte[4] { 0xb8, 0x01, 0x06, 0x24 });
            dataAccess.ApplyPatch(0x181c2c, new byte[4] { 0x7f, 0x00, 0x02, 0x24 });
            dataAccess.ApplyPatch(0x181c9c, new byte[4] { 0x0c, 0x00, 0x08, 0x24 });
            dataAccess.ApplyPatch(0x181bfc, new byte[4] { 0x25, 0x00, 0x0a, 0x24 });
            //Set Lp cap to 9999 (makes the value 10k)
            dataAccess.ApplyPatch(0x2209d4, new byte[4] { 0x10, 0x27, 0x81, 0x28 });
            dataAccess.ApplyPatch(0x2209e0, new byte[4] { 0x10, 0x27, 0x81, 0x28 });
            dataAccess.ApplyPatch(0x2209ec, new byte[4] { 0x0f, 0x27, 0x04, 0x24 });
            dataAccess.ApplyPatch(0x1af61c, new byte[4] { 0x0f, 0x27, 0x41, 0x28 });
            dataAccess.ApplyPatch(0x1af624, new byte[4] { 0x0f, 0x27, 0x06, 0x24 });
        }
        if (bReincarnationCount)
        {

            Byte[] bytes = Patcher.ChangeReincarnationAmount.Patch;
            bytes[0] = Convert.ToByte(reincarnationCount);
            dataAccess.ApplyPatch(Patcher.ChangeReincarnationAmount.Offset, bytes);

        }
        else
        {
            Patcher.undoPatch(Patcher.ChangeReincarnationAmount);
        }
        if (bTerrainBuff)
        {
            byte[] posBytes = BitConverter.GetBytes((int)terrainBuffAmount);
            byte[] negBytes = BitConverter.GetBytes(-(int)terrainBuffAmount);

            // D4(0th byte),FE(1st byte) = Negetive 300 change those bytes to change value of Negetive terrain
            // x2c(13th byte),x01 (14th byte) = postive 300 change those to change value of positive terrain
            dataAccess.ApplyPatch(ChangeTerrainValues, new byte[16] {
                negBytes[0], negBytes[1], 0xb5, 0x26,
                0x01, 0x00, 0x03, 0x24,
                0x04, 0x00, 0x43, 0x50,
                posBytes[0], posBytes[1], 0xb5, 0x26
            });
        }
        else
        {
            dataAccess.ApplyPatch(ChangeTerrainValues,
                new byte[16] { 0x0c, 0xfe, 0xb5, 0x26, 0x01, 0x00, 0x03, 0x24, 0x04, 0x00, 0x43, 0x50, 0xf4, 0x01, 0xb5, 0x26 });
        }
        new ChangeLpRecovery().ApplyOrRemove(bDeckLeaderRecovery, leaderRecovery);

        new ChangeStartingLp().ApplyOrRemove(bStartingLpRed, (uint)startingLpRed, 0);
        new ChangeStartingLp().ApplyOrRemove(bStartingLpWhite, (uint)startingLpWhite, 1);

        new ChangeSpRecovery().ApplyOrRemove(bSpRecoveryRed, (uint)spRecoveryRed, 0);
        new ChangeSpRecovery().ApplyOrRemove(bSpRecoveryWhite, (uint)spRecoveryWhite, 1);

        new ChangeStartingSp().ApplyOrRemove(bStartingSpRed, (uint)startingSpRed, 0);
        new ChangeStartingSp().ApplyOrRemove(bStartingSpWhite, (uint)startingSpWhite, 1);
    }

    void NopTutorialsForOtherMods()
    {
        //For slots
        dataAccess.NopInstructions(TaTutoFocusUnit032, 228);

        //All Custom Duels
        dataAccess.NopInstructions(TaTutoFocusUnit33, 120);
        dataAccess.NopInstructions(TaTutoFocusInit34, 176);

        //No Deck Requirements
        dataAccess.NopInstructions(TaTutoDbgInit34, 95);
        //AI Input Fix
        dataAccess.NopInstructions(TaTutoSetDeck35, 156);

        //For AI
        //Joey
        dataAccess.NopInstructions(TaTuto_Init036, 116);
        //No Revive equip AI
        dataAccess.NopInstructions(TaTuto_ControlFade, 416);

        //For Music
        dataAccess.NopInstructions(TaTuto_DrawTrapArea, 76);
        dataAccess.NopInstructions(AI_Tut_05, 564);

    }

    void RestoreNoppedTutorials()
    {
        dataAccess.ApplyPatch(TaTutoDbgInit34,
            new byte[384] {
                0xd0, 0xff, 0xbd, 0x27, 0x20, 0x00, 0xbf, 0x7f, 0x10, 0x00, 0xb1, 0x7f, 0x28, 0x26, 0x00, 0x70, 0x70, 0x7a, 0x07, 0x0c, 0x00, 0x00,
                0xb0, 0x7f, 0x28, 0x8e, 0x40, 0x70, 0x2a, 0x08, 0x11, 0x00, 0x09, 0x00, 0x20, 0x10, 0x28, 0x86, 0x00, 0x70, 0x28, 0x26, 0x00, 0x70,
                0x30, 0x7b, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x72, 0x01, 0x00, 0x10, 0x26, 0x2a, 0x10, 0x11, 0x02, 0xfa, 0xff, 0x40, 0x14, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x7a, 0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x28, 0x86, 0x40, 0x70, 0x2a, 0x08, 0x10, 0x00,
                0x09, 0x00, 0x20, 0x10, 0x28, 0x8e, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x30, 0x7b, 0x07, 0x0c, 0x28, 0x2e, 0x20, 0x72, 0x01, 0x00,
                0x31, 0x26, 0x2a, 0x10, 0x30, 0x02, 0xfa, 0xff, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x01, 0x06, 0x24,
                0x28, 0x26, 0x00, 0x70, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x01, 0x00, 0x05, 0x24, 0x1d, 0x01, 0x06, 0x24, 0x00, 0x7b,
                0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x02, 0x00, 0x05, 0x24, 0x9c, 0x00, 0x06, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70,
                0x03, 0x00, 0x05, 0x24, 0xf9, 0x00, 0x06, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x04, 0x00, 0x05, 0x24, 0xf9, 0x01,
                0x06, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x15, 0x00, 0x06, 0x24, 0x00, 0x7b, 0x07, 0x0c,
                0x28, 0x2e, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0xa7, 0x01, 0x06, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x28, 0x2e, 0x80, 0x70, 0x01, 0x00,
                0x04, 0x24, 0x02, 0x00, 0x05, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0x0a, 0x02, 0x06, 0x24, 0x01, 0x00, 0x04, 0x24, 0x03, 0x00, 0x05, 0x24,
                0x00, 0x7b, 0x07, 0x0c, 0x0c, 0x00, 0x06, 0x24, 0x01, 0x00, 0x04, 0x24, 0x04, 0x00, 0x05, 0x24, 0x00, 0x7b, 0x07, 0x0c, 0xb1, 0x01,
                0x06, 0x24, 0x28, 0x86, 0x00, 0x70, 0x28, 0x26, 0x00, 0x70, 0xb0, 0x7c, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x72, 0x01, 0x00, 0x10, 0x26,
                0x05, 0x00, 0x02, 0x2a, 0xfa, 0xff, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x28, 0x86, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0xb0, 0x7c,
                0x07, 0x0c, 0x28, 0x2e, 0x00, 0x72, 0x01, 0x00, 0x10, 0x26, 0x05, 0x00, 0x03, 0x2a, 0xfa, 0xff, 0x60, 0x14, 0x00, 0x00, 0x00, 0x00,
                0x20, 0x00, 0xbf, 0x7b, 0x10, 0x00, 0xb1, 0x7b, 0x00, 0x00, 0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x30, 0x00, 0xbd, 0x27, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            });
        dataAccess.ApplyPatch(TaTutoSetDeck35,
            new byte[624] {
                0xf0, 0xff, 0xbd, 0x27, 0x98, 0x00, 0x02, 0x24, 0xff, 0xff, 0x83, 0x30, 0x7f, 0x00, 0x62, 0x10, 0x00, 0x00, 0xbf, 0x7f, 0x87, 0x00,
                0x02, 0x24, 0x69, 0x00, 0x62, 0x10, 0x28, 0x26, 0x00, 0x70, 0x71, 0x00, 0x02, 0x24, 0x52, 0x00, 0x62, 0x10, 0x28, 0x26, 0x00, 0x70,
                0xac, 0x00, 0x02, 0x24, 0x3b, 0x00, 0x62, 0x10, 0x28, 0x26, 0x00, 0x70, 0x5d, 0x00, 0x02, 0x24, 0x37, 0x00, 0x62, 0x10, 0x00, 0x00,
                0x00, 0x00, 0x48, 0x00, 0x02, 0x24, 0x21, 0x00, 0x62, 0x10, 0x28, 0x26, 0x00, 0x70, 0xd0, 0x00, 0x02, 0x24, 0x0a, 0x00, 0x62, 0x10,
                0x28, 0x26, 0x00, 0x70, 0x3b, 0x00, 0x02, 0x24, 0x06, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x02, 0x24, 0x03, 0x00,
                0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x10, 0x28, 0x26, 0x00, 0x70, 0x28, 0x26, 0x00, 0x70, 0x1c, 0x7c, 0x07, 0x0c,
                0x00, 0x00, 0x00, 0x00, 0x41, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x07, 0x00, 0x05, 0x24, 0x4c, 0x7c,
                0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x9c, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xf9, 0x00, 0x05, 0x24,
                0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x26, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x62, 0x00,
                0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x70, 0x1c, 0x7c, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x05, 0x24,
                0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x05, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x9c, 0x00,
                0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xf9, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70,
                0x26, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x4e, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x28, 0x26,
                0x00, 0x70, 0x1c, 0x7c, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x41, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70,
                0x07, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x9c, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26,
                0x00, 0x70, 0xf9, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xfe, 0x02, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c,
                0x28, 0x26, 0x00, 0x70, 0x3a, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x70, 0x1c, 0x7c, 0x07, 0x0c, 0x00, 0x00,
                0x00, 0x00, 0x41, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x07, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c,
                0x28, 0x26, 0x00, 0x70, 0x9c, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xf9, 0x00, 0x05, 0x24, 0x4c, 0x7c,
                0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xf0, 0x02, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x26, 0x00, 0x00, 0x10,
                0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x70, 0x1c, 0x7c, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x41, 0x01, 0x05, 0x24, 0x4c, 0x7c,
                0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x07, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x9c, 0x00, 0x05, 0x24,
                0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xfe, 0x02, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xfe, 0x02,
                0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7c, 0x07, 0x0c,
                0x28, 0x26, 0x00, 0x70, 0x0f, 0x00, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x05, 0x00, 0x05, 0x24, 0x4c, 0x7c,
                0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x26, 0x01, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xfe, 0x02, 0x05, 0x24,
                0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xfe, 0x02, 0x05, 0x24, 0x4c, 0x7c, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x28, 0x26,
                0x00, 0x70, 0x78, 0x7c, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x10, 0x00, 0xbd, 0x27,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            });
        dataAccess.ApplyPatch(TaTutoFocusUnit33,
            new byte[480] {
                0xc0, 0xff, 0xbd, 0x27, 0x10, 0x00, 0xbf, 0x7f, 0x00, 0x00, 0xb0, 0x7f, 0x28, 0x86, 0x80, 0x70, 0x28, 0x26, 0x00, 0x70, 0x04, 0xea,
                0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x9c, 0x00, 0x03, 0x24, 0x3a, 0x00, 0x03, 0x12, 0x01, 0x00, 0x05, 0x24, 0x3a, 0x00, 0x03, 0x24,
                0x04, 0x00, 0x03, 0x12, 0x28, 0x26, 0x00, 0x70, 0x66, 0x00, 0x00, 0x10, 0x10, 0x00, 0xbf, 0x7b, 0x28, 0x26, 0x00, 0x70, 0x50, 0x7d,
                0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x20, 0x00, 0xa5, 0x27, 0x28, 0x86, 0x40, 0x70, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70,
                0x20, 0x00, 0xa3, 0x8f, 0xff, 0x47, 0x02, 0x24, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30,
                0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00,
                0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00,
                0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70,
                0x30, 0x00, 0xa1, 0xc7, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00,
                0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70,
                0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e,
                0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x32, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8,
                0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0xc7, 0x02, 0x34, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf,
                0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0xc7,
                0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00,
                0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6,
                0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x05, 0x24, 0x28, 0x26, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46,
                0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e,
                0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27,
                0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x10, 0x00,
                0xbf, 0x7b, 0x00, 0x00, 0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x40, 0x00, 0xbd, 0x27, 0x00, 0x00, 0x00, 0x00
            });
        dataAccess.ApplyPatch(TaTutoFocusInit34,
            new byte[704] {
                0xc0, 0xff, 0xbd, 0x27, 0x10, 0x00, 0xbf, 0x7f, 0x00, 0x00, 0xb0, 0x7f, 0x28, 0x86, 0x80, 0x70, 0x28, 0x26, 0x00, 0x70, 0x04, 0xea,
                0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x9c, 0x00, 0x03, 0x24, 0x70, 0x00, 0x03, 0x12, 0x01, 0x00, 0x05, 0x24, 0x1d, 0x00, 0x03, 0x24,
                0x3a, 0x00, 0x03, 0x12, 0x01, 0x00, 0x04, 0x24, 0x70, 0x01, 0x03, 0x24, 0x04, 0x00, 0x03, 0x12, 0x01, 0x00, 0x05, 0x24, 0x99, 0x00,
                0x00, 0x10, 0x10, 0x00, 0xbf, 0x7b, 0x01, 0x00, 0x05, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24,
                0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0x47, 0x02, 0x24, 0x3f, 0x00,
                0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00,
                0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c,
                0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x05, 0x24, 0x28, 0x26,
                0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70,
                0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00,
                0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c,
                0x28, 0x46, 0x00, 0x70, 0x65, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x2e,
                0x80, 0x70, 0x01, 0x01, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f,
                0xff, 0x47, 0x02, 0x24, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00,
                0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f,
                0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10,
                0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x01, 0x01, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7,
                0x01, 0x00, 0x04, 0x24, 0x28, 0x2e, 0x80, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00,
                0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c,
                0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e,
                0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x32, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x24,
                0x50, 0x7d, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86,
                0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0xc7, 0x02, 0x34, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e,
                0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0xc7, 0x42, 0x34, 0x23, 0x30,
                0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf,
                0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x01, 0x00,
                0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x05, 0x24, 0x28, 0x26, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c,
                0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e,
                0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70,
                0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x10, 0x00, 0xbf, 0x7b, 0x00, 0x00,
                0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x40, 0x00, 0xbd, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            });
        dataAccess.ApplyPatch(TaTutoFocusUnit032,
            new byte[912] {
                0xc0, 0xff, 0xbd, 0x27, 0x10, 0x00, 0xbf, 0x7f, 0x00, 0x00, 0xb0, 0x7f, 0x28, 0x86, 0x80, 0x70, 0x28, 0x26, 0x00, 0x70, 0x04, 0xea,
                0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x03, 0x00, 0x03, 0x24, 0xa5, 0x00, 0x03, 0x12, 0x01, 0x00, 0x04, 0x24, 0x9c, 0x00, 0x03, 0x24,
                0x6f, 0x00, 0x03, 0x12, 0x01, 0x00, 0x05, 0x24, 0x3a, 0x00, 0x00, 0x12, 0x01, 0x00, 0x04, 0x24, 0x3c, 0x00, 0x03, 0x24, 0x04, 0x00,
                0x03, 0x12, 0x28, 0x26, 0x00, 0x70, 0xcc, 0x00, 0x00, 0x10, 0x10, 0x00, 0xbf, 0x7b, 0x28, 0x26, 0x00, 0x70, 0x50, 0x7d, 0x07, 0x0c,
                0x28, 0x2e, 0x00, 0x70, 0x20, 0x00, 0xa5, 0x27, 0x28, 0x86, 0x40, 0x70, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x20, 0x00,
                0xa3, 0x8f, 0xff, 0x47, 0x02, 0x24, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00,
                0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00,
                0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f,
                0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x30, 0x00,
                0xa1, 0xc7, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7,
                0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea,
                0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70,
                0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x98, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
                0x04, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x00, 0x01, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c,
                0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0x47, 0x02, 0x24, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00,
                0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34,
                0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00,
                0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c,
                0x00, 0x01, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x04, 0x24, 0x28, 0x2e, 0x00, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84,
                0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70,
                0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26,
                0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x65, 0x00, 0x00, 0x10,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x20, 0x00,
                0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0xc7, 0x02, 0x34, 0x3f, 0x00, 0x63, 0x24,
                0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
                0x02, 0x3c, 0xfe, 0xc7, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00, 0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27,
                0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24, 0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00,
                0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00, 0x05, 0x24, 0x28, 0x26, 0x00, 0x70,
                0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24, 0x28, 0x46, 0x40, 0x70, 0x28, 0x26,
                0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e, 0x00, 0x70, 0x04, 0x00, 0x06, 0x24,
                0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x46,
                0x00, 0x70, 0x32, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x24, 0x50, 0x7d, 0x07, 0x0c, 0x28, 0x2e, 0x80, 0x70,
                0x01, 0x01, 0x04, 0x24, 0x20, 0x00, 0xa5, 0x27, 0x58, 0xd8, 0x07, 0x0c, 0x28, 0x86, 0x40, 0x70, 0x20, 0x00, 0xa3, 0x8f, 0xff, 0x47,
                0x02, 0x24, 0x3f, 0x00, 0x63, 0x24, 0x20, 0x00, 0xa3, 0xaf, 0x30, 0x00, 0x03, 0x8e, 0x23, 0x30, 0x43, 0x00, 0x04, 0x00, 0xc1, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x3c, 0xfe, 0x47, 0x42, 0x34, 0x23, 0x30, 0x43, 0x00, 0x24, 0x00, 0xa2, 0x8f, 0x20, 0x00,
                0xa4, 0x27, 0x30, 0x00, 0xa5, 0x27, 0x21, 0x10, 0x46, 0x00, 0x24, 0x00, 0xa2, 0xaf, 0x28, 0x00, 0xa2, 0x8f, 0x00, 0x10, 0x42, 0x24,
                0x54, 0xf2, 0x07, 0x0c, 0x28, 0x00, 0xa2, 0xaf, 0x18, 0xd6, 0x07, 0x0c, 0x01, 0x01, 0x04, 0x24, 0x30, 0x00, 0xa1, 0xc7, 0x01, 0x00,
                0x04, 0x24, 0x28, 0x2e, 0x80, 0x70, 0x00, 0x08, 0x00, 0x46, 0xd8, 0x84, 0x07, 0x0c, 0x30, 0x00, 0xa0, 0xe7, 0x07, 0x00, 0x06, 0x24,
                0x28, 0x46, 0x40, 0x70, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70, 0x28, 0xea, 0x07, 0x0c, 0x28, 0x4e,
                0x00, 0x70, 0x04, 0x00, 0x06, 0x24, 0x30, 0x00, 0xa9, 0x27, 0x28, 0x26, 0x00, 0x70, 0x28, 0x2e, 0x00, 0x70, 0x28, 0x3e, 0x00, 0x70,
                0x28, 0xea, 0x07, 0x0c, 0x28, 0x46, 0x00, 0x70, 0x10, 0x00, 0xbf, 0x7b, 0x00, 0x00, 0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x40, 0x00,
                0xbd, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            });
        dataAccess.ApplyPatch(TaTuto_DrawTrapArea,
            new byte[304] {
                0x70, 0xff, 0xbd, 0x27, 0x70, 0x00, 0xbf, 0x7f, 0x60, 0x00, 0xb6, 0x7f, 0x50, 0x00, 0xb5, 0x7f, 0x40, 0x00, 0xb4, 0x7f, 0x30, 0x00,
                0xb3, 0x7f, 0x20, 0x00, 0xb2, 0x7f, 0x10, 0x00, 0xb1, 0x7f, 0xc0, 0x00, 0x03, 0x24, 0x00, 0x00, 0xb0, 0x7f, 0x8e, 0x00, 0xa3, 0xa3,
                0x8d, 0x00, 0xa0, 0xa3, 0x8c, 0x00, 0xa3, 0xa3, 0x80, 0x00, 0x03, 0x24, 0x8f, 0x00, 0xa3, 0xa3, 0x62, 0x01, 0x83, 0x94, 0xff, 0x00,
                0xb3, 0x30, 0x8c, 0x00, 0xb2, 0x27, 0x28, 0xae, 0xc0, 0x70, 0x28, 0xa6, 0xe0, 0x70, 0x1a, 0x00, 0x73, 0x00, 0x01, 0x00, 0x63, 0x24,
                0x62, 0x01, 0x83, 0xa4, 0x10, 0x18, 0x00, 0x00, 0x23, 0x00, 0x60, 0x14, 0x28, 0xb6, 0x80, 0x70, 0x28, 0x86, 0x00, 0x70, 0x28, 0x8e,
                0x00, 0x70, 0x2a, 0x08, 0x91, 0x02, 0x28, 0x2e, 0x20, 0x72, 0x0b, 0x28, 0x81, 0x02, 0x2a, 0x08, 0x34, 0x02, 0x28, 0x36, 0x20, 0x72,
                0x0b, 0x30, 0x81, 0x02, 0x2a, 0x08, 0xb0, 0x02, 0x28, 0x26, 0x00, 0x72, 0x0b, 0x20, 0xa1, 0x02, 0x2a, 0x08, 0x15, 0x02, 0x28, 0x1e,
                0x00, 0x72, 0x0b, 0x18, 0xa1, 0x02, 0x23, 0x20, 0x64, 0x00, 0x23, 0x18, 0xc5, 0x00, 0x21, 0x18, 0x83, 0x00, 0x02, 0x00, 0x61, 0x28,
                0x08, 0x00, 0x20, 0x50, 0x01, 0x00, 0x31, 0x26, 0x01, 0x00, 0x08, 0x24, 0x28, 0x26, 0x00, 0x72, 0x28, 0x2e, 0x20, 0x72, 0x28, 0x36,
                0x00, 0x70, 0x18, 0x8c, 0x07, 0x0c, 0x28, 0x3e, 0x40, 0x72, 0x01, 0x00, 0x31, 0x26, 0x07, 0x00, 0x21, 0x2a, 0xe6, 0xff, 0x20, 0x14,
                0x2a, 0x08, 0x91, 0x02, 0x01, 0x00, 0x10, 0x26, 0x07, 0x00, 0x01, 0x2a, 0xe1, 0xff, 0x20, 0x14, 0x28, 0x8e, 0x00, 0x70, 0x62, 0x01,
                0xc3, 0x96, 0x2a, 0x08, 0x63, 0x02, 0x02, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x62, 0x01, 0xc0, 0xa6, 0x70, 0x00, 0xbf, 0x7b,
                0x60, 0x00, 0xb6, 0x7b, 0x50, 0x00, 0xb5, 0x7b, 0x40, 0x00, 0xb4, 0x7b, 0x30, 0x00, 0xb3, 0x7b, 0x20, 0x00, 0xb2, 0x7b, 0x10, 0x00,
                0xb1, 0x7b, 0x00, 0x00, 0xb0, 0x7b, 0x08, 0x00, 0xe0, 0x03, 0x90, 0x00, 0xbd, 0x27, 0x00, 0x00, 0x00, 0x00
            });
        dataAccess.ApplyPatch(AI_Tut_05,
            new byte[2256] {
                0xb0, 0xff, 0xbd, 0x27, 0x40, 0x00, 0xbf, 0x7f, 0x30, 0x00, 0xb3, 0x7f, 0x20, 0x00, 0xb2, 0x7f, 0x10, 0x00, 0xb1, 0x7f, 0x28, 0x9e,
                0xa0, 0x70, 0x00, 0x00, 0xb0, 0x7f, 0xe0, 0x79, 0x07, 0x0c, 0x28, 0x96, 0x00, 0x70, 0x05, 0x00, 0x40, 0x10, 0x28, 0x26, 0x00, 0x70,
                0xf8, 0x79, 0x07, 0x0c, 0x01, 0x00, 0x04, 0x24, 0x04, 0x00, 0x00, 0x10, 0x80, 0x00, 0x06, 0x24, 0xf8, 0x79, 0x07, 0x0c, 0x00, 0x00,
                0x00, 0x00, 0x80, 0x00, 0x06, 0x24, 0x28, 0x26, 0x00, 0x70, 0x1c, 0x0f, 0x08, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x01, 0x00, 0x05, 0x24,
                0x80, 0x00, 0x06, 0x24, 0x1c, 0x0f, 0x08, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x02, 0x00, 0x05, 0x24, 0x80, 0x00, 0x06, 0x24, 0x1c, 0x0f,
                0x08, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x03, 0x00, 0x05, 0x24, 0x80, 0x00, 0x06, 0x24, 0x1c, 0x0f, 0x08, 0x0c, 0x28, 0x26, 0x00, 0x70,
                0x00, 0x08, 0x06, 0x24, 0x28, 0x26, 0x00, 0x70, 0x90, 0x0e, 0x08, 0x0c, 0x28, 0x2e, 0x00, 0x70, 0x03, 0x00, 0x40, 0x10, 0xfe, 0xff,
                0x02, 0x24, 0x05, 0x02, 0x00, 0x10, 0x40, 0x00, 0xbf, 0x7b, 0xa2, 0x01, 0x62, 0x96, 0x45, 0x00, 0x41, 0x2c, 0xfd, 0x01, 0x20, 0x50,
                0xff, 0xff, 0x02, 0x24, 0x2c, 0x00, 0x03, 0x3c, 0x60, 0xbe, 0x64, 0x24, 0x80, 0x18, 0x02, 0x00, 0x21, 0x18, 0x64, 0x00, 0x00, 0x00,
                0x63, 0x8c, 0x08, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x24, 0xf5, 0x01, 0x00, 0x10, 0xa2, 0x01, 0x62, 0xa6,
                0xb0, 0xd7, 0x07, 0x0c, 0x28, 0x26, 0x00, 0x70, 0xf2, 0x01, 0x40, 0x10, 0x28, 0x16, 0x00, 0x70, 0xb0, 0xd7, 0x07, 0x0c, 0x00, 0x01,
                0x04, 0x24, 0xed, 0x01, 0x40, 0x10, 0x35, 0x00, 0x02, 0x24, 0xeb, 0x01, 0x00, 0x10, 0xa2, 0x01, 0x62, 0xa6, 0x02, 0x00, 0x03, 0x24,
                0x81, 0x00, 0x43, 0x50, 0xe5, 0x01, 0x02, 0x64, 0x0a, 0x00, 0x03, 0x24, 0x7b, 0x00, 0x43, 0x50, 0xe7, 0x01, 0x02, 0x64, 0x0d, 0x00,
                0x03, 0x24, 0x75, 0x00, 0x43, 0x50, 0xe9, 0x01, 0x02, 0x64, 0x11, 0x00, 0x03, 0x24, 0x6f, 0x00, 0x43, 0x50, 0xea, 0x01, 0x02, 0x64,
                0x13, 0x00, 0x03, 0x24, 0x69, 0x00, 0x43, 0x50, 0xec, 0x01, 0x02, 0x64, 0x19, 0x00, 0x03, 0x24, 0x63, 0x00, 0x43, 0x50, 0xee, 0x01,
                0x02, 0x64, 0x1c, 0x00, 0x03, 0x24, 0x5d, 0x00, 0x43, 0x50, 0xef, 0x01, 0x02, 0x64, 0x20, 0x00, 0x03, 0x24, 0x57, 0x00, 0x43, 0x50,
                0xf1, 0x01, 0x02, 0x64, 0x22, 0x00, 0x03, 0x24, 0x51, 0x00, 0x43, 0x50, 0xf3, 0x01, 0x02, 0x64, 0x24, 0x00, 0x03, 0x24, 0x4b, 0x00,
                0x43, 0x50, 0xf4, 0x01, 0x02, 0x64, 0x27, 0x00, 0x03, 0x24, 0x45, 0x00, 0x43, 0x50, 0xf8, 0x01, 0x02, 0x64, 0x2a, 0x00, 0x03, 0x24,
                0x3f, 0x00, 0x43, 0x50, 0xfa, 0x01, 0x02, 0x64, 0x2e, 0x00, 0x03, 0x24, 0x39, 0x00, 0x43, 0x50, 0xfd, 0x01, 0x02, 0x64, 0x30, 0x00,
                0x03, 0x24, 0x33, 0x00, 0x43, 0x50, 0x00, 0x02, 0x02, 0x64, 0x32, 0x00, 0x03, 0x24, 0x2d, 0x00, 0x43, 0x50, 0x01, 0x02, 0x02, 0x64,
                0x36, 0x00, 0x03, 0x24, 0x27, 0x00, 0x43, 0x50, 0x02, 0x02, 0x02, 0x64, 0x39, 0x00, 0x03, 0x24, 0x21, 0x00, 0x43, 0x50, 0x05, 0x02,
                0x02, 0x64, 0x3c, 0x00, 0x03, 0x24, 0x1b, 0x00, 0x43, 0x50, 0x06, 0x02, 0x02, 0x64, 0x3e, 0x00, 0x03, 0x24, 0x15, 0x00, 0x43, 0x50,
                0x08, 0x02, 0x02, 0x64, 0x40, 0x00, 0x03, 0x24, 0x0f, 0x00, 0x43, 0x50, 0x09, 0x02, 0x02, 0x64, 0x42, 0x00, 0x03, 0x24, 0x09, 0x00,
                0x43, 0x50, 0x0a, 0x02, 0x02, 0x64, 0x44, 0x00, 0x03, 0x24, 0x03, 0x00, 0x43, 0x10, 0x0c, 0x02, 0x02, 0x64, 0x43, 0x00, 0x00, 0x10,
                0xe5, 0x01, 0x02, 0x64, 0x28, 0x1e, 0x40, 0x70, 0x42, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0x0b, 0x02, 0x03, 0x64, 0x3f, 0x00,
                0x00, 0x10, 0x01, 0x00, 0x10, 0x64, 0x28, 0x1e, 0x40, 0x70, 0x3c, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0x28, 0x1e, 0x40, 0x70,
                0x39, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0x07, 0x02, 0x03, 0x64, 0x36, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0x28, 0x1e,
                0x40, 0x70, 0x33, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0x04, 0x02, 0x03, 0x64, 0x30, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70,
                0x28, 0x1e, 0x40, 0x70, 0x2d, 0x00, 0x00, 0x10, 0x01, 0x00, 0x10, 0x64, 0x28, 0x1e, 0x40, 0x70, 0x2a, 0x00, 0x00, 0x10, 0x28, 0x86,
                0x00, 0x70, 0xff, 0x01, 0x03, 0x64, 0x27, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0xfc, 0x01, 0x03, 0x64, 0x24, 0x00, 0x00, 0x10,
                0x02, 0x00, 0x10, 0x64, 0xf9, 0x01, 0x03, 0x64, 0x21, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0xf7, 0x01, 0x03, 0x64, 0x1e, 0x00,
                0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0x28, 0x1e, 0x40, 0x70, 0x1b, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0xf2, 0x01, 0x03, 0x64,
                0x18, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0xf0, 0x01, 0x03, 0x64, 0x15, 0x00, 0x00, 0x10, 0x02, 0x00, 0x10, 0x64, 0x28, 0x1e,
                0x40, 0x70, 0x12, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0xed, 0x01, 0x03, 0x64, 0x0f, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70,
                0xeb, 0x01, 0x03, 0x64, 0x0c, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0x28, 0x1e, 0x40, 0x70, 0x09, 0x00, 0x00, 0x10, 0x02, 0x00,
                0x10, 0x64, 0xe8, 0x01, 0x03, 0x64, 0x06, 0x00, 0x00, 0x10, 0x28, 0x86, 0x00, 0x70, 0xe6, 0x01, 0x03, 0x64, 0x03, 0x00, 0x00, 0x10,
                0x28, 0x86, 0x00, 0x70, 0x28, 0x1e, 0x40, 0x70, 0x28, 0x86, 0x00, 0x70, 0xff, 0xff, 0x42, 0x30, 0xdc, 0x09, 0x44, 0x24, 0xff, 0xff,
                0x62, 0x30, 0xdc, 0x09, 0x45, 0x24, 0x08, 0xff, 0x09, 0x0c, 0x28, 0x36, 0x60, 0x72, 0x01, 0x00, 0x04, 0x24, 0x5a, 0x01, 0x44, 0x14,
                0xff, 0xff, 0x03, 0x32, 0x0a, 0x00, 0x64, 0x10, 0x28, 0x26, 0x00, 0x70, 0x02, 0x00, 0x02, 0x24, 0x03, 0x00, 0x62, 0x10, 0x28, 0x26,
                0x00, 0x70, 0x53, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x79, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x10,
                0x20, 0x00, 0x02, 0x24, 0xe8, 0x79, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x01,
                0x63, 0x96, 0x01, 0x00, 0x62, 0x24, 0x0d, 0x00, 0x61, 0x28, 0x46, 0x01, 0x20, 0x14, 0xa4, 0x01, 0x62, 0xa6, 0xa4, 0x01, 0x60, 0xa6,
                0xa2, 0x01, 0x64, 0x96, 0x18, 0x00, 0x02, 0x24, 0x01, 0x00, 0x83, 0x24, 0x40, 0x01, 0x82, 0x10, 0xa2, 0x01, 0x63, 0xa6, 0x17, 0x00,
                0x02, 0x24, 0x13, 0x00, 0x82, 0x10, 0x00, 0x80, 0x02, 0x34, 0x15, 0x00, 0x02, 0x24, 0x0f, 0x00, 0x82, 0x10, 0x16, 0x00, 0x02, 0x24,
                0x0b, 0x00, 0x82, 0x10, 0x00, 0x20, 0x02, 0x24, 0x14, 0x00, 0x02, 0x24, 0x07, 0x00, 0x82, 0x10, 0x21, 0x00, 0x02, 0x24, 0x03, 0x00,
                0x82, 0x10, 0x04, 0x00, 0x02, 0x24, 0x31, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x02, 0x24, 0x2d, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x34, 0x2a, 0x01, 0x00, 0x10, 0x00, 0x00,
                0x00, 0x00, 0xa4, 0x01, 0x63, 0x96, 0x01, 0x00, 0x62, 0x24, 0x07, 0x00, 0x61, 0x28, 0x24, 0x01, 0x20, 0x14, 0xa4, 0x01, 0x62, 0xa6,
                0xa4, 0x01, 0x60, 0xa6, 0xa2, 0x01, 0x64, 0x96, 0x41, 0x00, 0x02, 0x24, 0x01, 0x00, 0x83, 0x24, 0x3d, 0x00, 0x82, 0x10, 0xa2, 0x01,
                0x63, 0xa6, 0x28, 0x00, 0x02, 0x24, 0x38, 0x00, 0x82, 0x10, 0x00, 0x40, 0x02, 0x24, 0x25, 0x00, 0x02, 0x24, 0x34, 0x00, 0x82, 0x10,
                0x0b, 0x00, 0x02, 0x24, 0x32, 0x00, 0x82, 0x10, 0x07, 0x00, 0x02, 0x24, 0x2e, 0x00, 0x82, 0x10, 0x00, 0x20, 0x02, 0x24, 0x06, 0x00,
                0x02, 0x24, 0x2a, 0x00, 0x82, 0x10, 0x09, 0x00, 0x02, 0x24, 0x26, 0x00, 0x82, 0x10, 0x40, 0x00, 0x02, 0x24, 0x08, 0x00, 0x02, 0x24,
                0x22, 0x00, 0x82, 0x10, 0x05, 0x00, 0x03, 0x24, 0x20, 0x00, 0x83, 0x10, 0x04, 0x00, 0x03, 0x24, 0x1c, 0x00, 0x83, 0x50, 0x00, 0x10,
                0x02, 0x24, 0x0c, 0x00, 0x03, 0x24, 0x17, 0x00, 0x83, 0x50, 0x80, 0x00, 0x02, 0x24, 0x03, 0x00, 0x03, 0x24, 0x13, 0x00, 0x83, 0x10,
                0x12, 0x00, 0x03, 0x24, 0x01, 0x01, 0x83, 0x10, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x24, 0x0c, 0x00, 0x82, 0x10, 0x10, 0x00,
                0x02, 0x24, 0x31, 0x00, 0x02, 0x24, 0x07, 0x00, 0x82, 0x10, 0x01, 0x00, 0x02, 0x24, 0x2f, 0x00, 0x02, 0x24, 0x03, 0x00, 0x82, 0x10,
                0x00, 0x00, 0x00, 0x00, 0xf5, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x24, 0xf3, 0x00, 0x00, 0x10, 0x00, 0x00,
                0x00, 0x00, 0xf1, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x02, 0x24, 0xee, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
                0xec, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x02, 0x24, 0xe9, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
                0x02, 0x24, 0xe6, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x24, 0xe3, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
                0xe1, 0x00, 0x00, 0x10, 0x00, 0x06, 0x02, 0x24, 0xa4, 0x01, 0x63, 0x96, 0x01, 0x00, 0x62, 0x24, 0x1f, 0x00, 0x61, 0x28, 0xdb, 0x00,
                0x20, 0x14, 0xa4, 0x01, 0x62, 0xa6, 0xa4, 0x01, 0x60, 0xa6, 0xa2, 0x01, 0x64, 0x96, 0x1b, 0x00, 0x02, 0x24, 0x01, 0x00, 0x83, 0x24,
                0x03, 0x00, 0x82, 0x10, 0xa2, 0x01, 0x63, 0xa6, 0xd3, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xd2, 0x00, 0x00, 0x10, 0x20, 0x00,
                0x02, 0x24, 0x10, 0x00, 0x04, 0x24, 0xff, 0xff, 0x05, 0x24, 0x24, 0xfe, 0x09, 0x0c, 0x28, 0x36, 0x00, 0x70, 0x01, 0x00, 0x05, 0x24,
                0xca, 0x00, 0x45, 0x14, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x01, 0x60, 0xa6, 0xa2, 0x01, 0x64, 0x96, 0x43, 0x00, 0x02, 0x24, 0x01, 0x00,
                0x83, 0x24, 0xc4, 0x00, 0x82, 0x10, 0xa2, 0x01, 0x63, 0xa6, 0x33, 0x00, 0x02, 0x24, 0xc1, 0x00, 0x82, 0x10, 0x2b, 0x00, 0x02, 0x24,
                0xbf, 0x00, 0x82, 0x10, 0x1d, 0x00, 0x02, 0x24, 0xbd, 0x00, 0x82, 0x10, 0x0e, 0x00, 0x02, 0x24, 0x03, 0x00, 0x82, 0x10, 0x28, 0x26,
                0x00, 0x70, 0xb9, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xec, 0x7e, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x10,
                0x00, 0x00, 0x00, 0x00, 0xa4, 0x01, 0x63, 0x96, 0x01, 0x00, 0x62, 0x24, 0x1f, 0x00, 0x61, 0x28, 0xb0, 0x00, 0x20, 0x14, 0xa4, 0x01,
                0x62, 0xa6, 0xa4, 0x01, 0x60, 0xa6, 0xa2, 0x01, 0x62, 0x96, 0x01, 0x00, 0x42, 0x24, 0xab, 0x00, 0x00, 0x10, 0xa2, 0x01, 0x62, 0xa6,
                0x35, 0x00, 0x03, 0x24, 0x0b, 0x00, 0x43, 0x50, 0x01, 0x00, 0x12, 0x64, 0x2d, 0x00, 0x03, 0x24, 0x07, 0x00, 0x43, 0x10, 0x1f, 0x00,
                0x03, 0x24, 0x05, 0x00, 0x43, 0x10, 0x10, 0x00, 0x03, 0x24, 0x03, 0x00, 0x43, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x10,
                0x01, 0x00, 0x05, 0x24, 0x01, 0x00, 0x12, 0x64, 0x01, 0x00, 0x05, 0x24, 0x10, 0x00, 0x04, 0x24, 0x24, 0xfe, 0x09, 0x0c, 0x28, 0x36,
                0xa0, 0x70, 0x01, 0x00, 0x04, 0x24, 0x97, 0x00, 0x44, 0x14, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x40, 0x12, 0x00, 0x00, 0x00, 0x00,
                0xe8, 0x79, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x01, 0x62, 0x96, 0x01, 0x00, 0x42, 0x24, 0xa2, 0x01, 0x62, 0xa6, 0x8e, 0x00,
                0x00, 0x10, 0xa4, 0x01, 0x60, 0xa6, 0x29, 0x00, 0x03, 0x24, 0x0e, 0x00, 0x43, 0x50, 0x58, 0xff, 0x10, 0x24, 0x26, 0x00, 0x04, 0x24,
                0x09, 0x00, 0x44, 0x50, 0xb8, 0xff, 0x10, 0x24, 0x23, 0x00, 0x03, 0x24, 0x03, 0x00, 0x43, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
                0x00, 0x10, 0x0a, 0x00, 0x05, 0x24, 0xa2, 0x01, 0x64, 0xa6, 0x81, 0x00, 0x00, 0x10, 0x28, 0x16, 0x00, 0x70, 0x02, 0x00, 0x00, 0x10,
                0x14, 0x00, 0x11, 0x24, 0x3c, 0x00, 0x11, 0x24, 0x0a, 0x00, 0x05, 0x24, 0x00, 0x08, 0x06, 0x24, 0x28, 0x3e, 0x00, 0x72, 0x28, 0x46,
                0x20, 0x72, 0x8c, 0xfd, 0x09, 0x0c, 0x28, 0x26, 0x60, 0x72, 0x62, 0x01, 0x63, 0x96, 0x01, 0x00, 0x62, 0x24, 0x3d, 0x00, 0x61, 0x28,
                0x72, 0x00, 0x20, 0x14, 0x62, 0x01, 0x62, 0xa6, 0x94, 0x93, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x01, 0x60, 0xa6, 0x62, 0x01,
                0x60, 0xa6, 0xa2, 0x01, 0x62, 0x96, 0x01, 0x00, 0x42, 0x24, 0x6a, 0x00, 0x00, 0x10, 0xa2, 0x01, 0x62, 0xa6, 0x02, 0x00, 0x05, 0x24,
                0x28, 0x26, 0x00, 0x70, 0x1c, 0x0f, 0x08, 0x0c, 0x28, 0x36, 0x00, 0x70, 0x62, 0x01, 0x63, 0x96, 0x01, 0x00, 0x62, 0x24, 0x07, 0x00,
                0x61, 0x28, 0x61, 0x00, 0x20, 0x14, 0x62, 0x01, 0x62, 0xa6, 0xa4, 0x01, 0x60, 0xa6, 0x62, 0x01, 0x60, 0xa6, 0xa2, 0x01, 0x62, 0x96,
                0x01, 0x00, 0x42, 0x24, 0x5b, 0x00, 0x00, 0x10, 0xa2, 0x01, 0x62, 0xa6, 0x62, 0x01, 0x63, 0x96, 0x01, 0x00, 0x62, 0x24, 0x62, 0x01,
                0x62, 0xa6, 0x0c, 0x00, 0x62, 0x28, 0x55, 0x00, 0x40, 0x14, 0x02, 0x00, 0x05, 0x24, 0xff, 0x00, 0x06, 0x24, 0x1c, 0x0f, 0x08, 0x0c,
                0x28, 0x26, 0x00, 0x70, 0x62, 0x01, 0x62, 0x96, 0x13, 0x00, 0x41, 0x28, 0x4e, 0x00, 0x20, 0x14, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x01,
                0x60, 0xa6, 0x62, 0x01, 0x60, 0xa6, 0xa2, 0x01, 0x62, 0x96, 0x01, 0x00, 0x42, 0x24, 0x48, 0x00, 0x00, 0x10, 0xa2, 0x01, 0x62, 0xa6,
                0x03, 0x00, 0x05, 0x24, 0xff, 0x00, 0x06, 0x24, 0x1c, 0x0f, 0x08, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x62, 0x01, 0x63, 0x96, 0x01, 0x00,
                0x62, 0x24, 0x07, 0x00, 0x61, 0x28, 0x3f, 0x00, 0x20, 0x14, 0x62, 0x01, 0x62, 0xa6, 0xa4, 0x01, 0x60, 0xa6, 0x62, 0x01, 0x60, 0xa6,
                0xa2, 0x01, 0x62, 0x96, 0x01, 0x00, 0x42, 0x24, 0x39, 0x00, 0x00, 0x10, 0xa2, 0x01, 0x62, 0xa6, 0x62, 0x01, 0x63, 0x96, 0x01, 0x00,
                0x62, 0x24, 0x62, 0x01, 0x62, 0xa6, 0x0c, 0x00, 0x62, 0x28, 0x33, 0x00, 0x40, 0x14, 0x03, 0x00, 0x05, 0x24, 0x28, 0x26, 0x00, 0x70,
                0x1c, 0x0f, 0x08, 0x0c, 0x28, 0x36, 0x00, 0x70, 0x62, 0x01, 0x62, 0x96, 0x13, 0x00, 0x41, 0x28, 0x2c, 0x00, 0x20, 0x14, 0x00, 0x00,
                0x00, 0x00, 0xa4, 0x01, 0x60, 0xa6, 0x62, 0x01, 0x60, 0xa6, 0xa2, 0x01, 0x62, 0x96, 0x01, 0x00, 0x42, 0x24, 0x26, 0x00, 0x00, 0x10,
                0xa2, 0x01, 0x62, 0xa6, 0x01, 0x00, 0x05, 0x24, 0x28, 0x26, 0x00, 0x70, 0x1c, 0x0f, 0x08, 0x0c, 0x28, 0x36, 0x00, 0x70, 0x62, 0x01,
                0x63, 0x96, 0x01, 0x00, 0x62, 0x24, 0x07, 0x00, 0x61, 0x28, 0x1d, 0x00, 0x20, 0x14, 0x62, 0x01, 0x62, 0xa6, 0xa4, 0x01, 0x60, 0xa6,
                0x62, 0x01, 0x60, 0xa6, 0xa2, 0x01, 0x62, 0x96, 0x01, 0x00, 0x42, 0x24, 0x17, 0x00, 0x00, 0x10, 0xa2, 0x01, 0x62, 0xa6, 0x62, 0x01,
                0x63, 0x96, 0x01, 0x00, 0x62, 0x24, 0x62, 0x01, 0x62, 0xa6, 0x0c, 0x00, 0x62, 0x28, 0x11, 0x00, 0x40, 0x14, 0x01, 0x00, 0x05, 0x24,
                0xff, 0x00, 0x06, 0x24, 0x1c, 0x0f, 0x08, 0x0c, 0x28, 0x26, 0x00, 0x70, 0x62, 0x01, 0x62, 0x96, 0x13, 0x00, 0x41, 0x28, 0x0a, 0x00,
                0x20, 0x14, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x01, 0x60, 0xa6, 0x62, 0x01, 0x60, 0xa6, 0xa2, 0x01, 0x62, 0x96, 0x01, 0x00, 0x42, 0x24,
                0x04, 0x00, 0x00, 0x10, 0xa2, 0x01, 0x62, 0xa6, 0xff, 0xff, 0x02, 0x24, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x28, 0x16,
                0x00, 0x70, 0x40, 0x00, 0xbf, 0x7b, 0x30, 0x00, 0xb3, 0x7b, 0x20, 0x00, 0xb2, 0x7b, 0x10, 0x00, 0xb1, 0x7b, 0x00, 0x00, 0xb0, 0x7b,
                0x08, 0x00, 0xe0, 0x03, 0x50, 0x00, 0xbd, 0x27, 0x00, 0x00, 0x00, 0x00
            });
        dataAccess.ApplyPatch(TaTuto_Init036,
            new byte[116] {
                0xF0, 0xFF, 0xBD, 0x27, 0x00, 0x00, 0xBF, 0x7F, 0x28, 0x26, 0x00, 0x70, 0x9C, 0x7B, 0x07, 0x0C, 0x28, 0x2E, 0x00, 0x70, 0x03, 0x00,
                0x05, 0x24, 0x9C, 0x7B, 0x07, 0x0C, 0x28, 0x26, 0x00, 0x70, 0x06, 0x00, 0x05, 0x24, 0x9C, 0x7B, 0x07, 0x0C, 0x28, 0x26, 0x00, 0x70,
                0xBC, 0x02, 0x05, 0x24, 0x9C, 0x7B, 0x07, 0x0C, 0x28, 0x26, 0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x9C, 0x7B, 0x07, 0x0C, 0x28, 0x2E,
                0x00, 0x70, 0x01, 0x00, 0x04, 0x24, 0x9C, 0x7B, 0x07, 0x0C, 0x03, 0x00, 0x05, 0x24, 0x01, 0x00, 0x04, 0x24, 0x9C, 0x7B, 0x07, 0x0C,
                0x06, 0x00, 0x05, 0x24, 0x01, 0x00, 0x04, 0x24, 0x9C, 0x7B, 0x07, 0x0C, 0xBB, 0x02, 0x05, 0x24, 0x00, 0x00, 0xBF, 0x7B, 0x08, 0x00,
                0xE0, 0x03, 0x10, 0x00, 0xBD, 0x27
            });
        dataAccess.ApplyPatch(TaTuto_ControlFade,
            new byte[416] {
                0xD0, 0xFF, 0xBD, 0x27, 0x20, 0x00, 0xBF, 0x7F, 0x10, 0x00, 0xB1, 0x7F, 0x00, 0x00, 0xB0, 0x7F, 0x28, 0x8E, 0x80, 0x70, 0x22, 0x00,
                0xA0, 0x18, 0x28, 0x86, 0x00, 0x70, 0x48, 0xDB, 0x07, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x42, 0x30, 0x80, 0x00, 0x41, 0x28,
                0x0A, 0x00, 0x20, 0x10, 0x01, 0x00, 0x02, 0x26, 0x48, 0xDB, 0x07, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x42, 0x30, 0x21, 0x10,
                0x22, 0x02, 0x3C, 0xDB, 0x07, 0x0C, 0xFF, 0x00, 0x44, 0x30, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x26,
                0xFF, 0x00, 0x50, 0x30, 0x44, 0xDB, 0x07, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x42, 0x30, 0x80, 0x00, 0x41, 0x28, 0x0A, 0x00,
                0x20, 0x10, 0x01, 0x00, 0x02, 0x26, 0x44, 0xDB, 0x07, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x42, 0x30, 0x21, 0x10, 0x22, 0x02,
                0x38, 0xDB, 0x07, 0x0C, 0xFF, 0x00, 0x44, 0x30, 0x39, 0x00, 0x00, 0x10, 0x02, 0x00, 0x02, 0x24, 0x01, 0x00, 0x02, 0x26, 0x35, 0x00,
                0x00, 0x10, 0xFF, 0x00, 0x50, 0x30, 0x33, 0x00, 0xA1, 0x04, 0x00, 0x00, 0x00, 0x00, 0x48, 0xDB, 0x07, 0x0C, 0x00, 0x00, 0x00, 0x00,
                0xFF, 0x00, 0x42, 0x30, 0x14, 0x00, 0x40, 0x18, 0x01, 0x00, 0x02, 0x26, 0x48, 0xDB, 0x07, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
                0x42, 0x30, 0x23, 0x10, 0x51, 0x00, 0x05, 0x00, 0x41, 0x04, 0x00, 0x00, 0x00, 0x00, 0x3C, 0xDB, 0x07, 0x0C, 0x28, 0x26, 0x00, 0x70,
                0x0B, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xDB, 0x07, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x42, 0x30, 0x23, 0x10,
                0x51, 0x00, 0x3C, 0xDB, 0x07, 0x0C, 0xFF, 0x00, 0x44, 0x30, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x26,
                0xFF, 0x00, 0x50, 0x30, 0x44, 0xDB, 0x07, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x42, 0x30, 0x14, 0x00, 0x40, 0x18, 0x01, 0x00,
                0x02, 0x26, 0x44, 0xDB, 0x07, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x42, 0x30, 0x23, 0x10, 0x51, 0x00, 0x05, 0x00, 0x41, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x38, 0xDB, 0x07, 0x0C, 0x28, 0x26, 0x00, 0x70, 0x0B, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x44, 0xDB,
                0x07, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x42, 0x30, 0x23, 0x10, 0x51, 0x00, 0x38, 0xDB, 0x07, 0x0C, 0xFF, 0x00, 0x44, 0x30,
                0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x26, 0xFF, 0x00, 0x50, 0x30, 0x02, 0x00, 0x02, 0x24, 0xFF, 0x00,
                0x03, 0x32, 0x04, 0x00, 0x62, 0x14, 0x28, 0x16, 0x00, 0x70, 0x02, 0x00, 0x00, 0x10, 0x01, 0x00, 0x02, 0x24, 0x28, 0x16, 0x00, 0x70,
                0x20, 0x00, 0xBF, 0x7B, 0x10, 0x00, 0xB1, 0x7B, 0x00, 0x00, 0xB0, 0x7B, 0x08, 0x00, 0xE0, 0x03, 0x30, 0x00, 0xBD, 0x27
            });
    }

    void SaveCustomSlots()
    {
        if (bSaveCustomSlotRewards)
        {
            dataAccess.ApplyPatch(AddSlotRewardsPtr, new byte[8] { 0x44, 0xc9, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00 });
            byte[] bytes = new byte[768] {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd2, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00,
                0x00, 0x00, 0x17, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10,
                0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00,
                0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24,
                0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02,
                0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00,
                0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00,
                0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10,
                0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00,
                0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24,
                0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02,
                0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00,
                0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00,
                0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10,
                0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00,
                0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24,
                0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x02,
                0x02, 0x24, 0x5c, 0x00, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x47, 0x45, 0x09, 0x08, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x10,
                0x00, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x02, 0x24, 0x58, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x55, 0x00,
                0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x52, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24,
                0x4f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x4c, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x24, 0x49, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x46, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x24, 0x43, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3d, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x3a, 0x00, 0x00, 0x10,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x37, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x34, 0x00,
                0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x31, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24,
                0x2e, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x2b, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x24, 0x28, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x25, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x24, 0x22, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x1f, 0x00, 0x00, 0x10, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x1c, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x19, 0x00, 0x00, 0x10,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x16, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x13, 0x00,
                0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24,
                0x0d, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x0a, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x24, 0x07, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x03, 0x02, 0x24, 0xab, 0x45, 0x09, 0x08, 0x00, 0x00, 0x00, 0x00
            };
            int j = 0;
            for (int i = 24; j < 30; i += 12)
            {
                var newBytes = BitConverter.GetBytes(SpecialThreeInARows[j]);
                j++;
                bytes[i] = newBytes[0];
                bytes[i + 1] = newBytes[1];
            }
            j = 0;
            for (int i = 400; j < 30; i += 12)
            {
                var newBytes = BitConverter.GetBytes(SpecialSlotRewards[j]);
                j++;
                bytes[i] = newBytes[0];
                bytes[i + 1] = newBytes[1];
            }
            dataAccess.ApplyPatch(TaTutoFocusUnit032, bytes);
        }
        else
        {
            dataAccess.ApplyPatch(AddSlotRewardsPtr, new byte[8] { 0xd2, 0x02, 0x02, 0x24, 0x28, 0x00, 0x62, 0x10 });
        }
    }

    public bool IsUsingFastIntroMods()
    {
        return bSaveCustomSlotRewards || bAiDoubleTap || bAllCustomDuels ||
               bNoDcPostGame || bForceNewStartSide || bGiveJoeyReviveMission || bToonLeaderLandChange || bDontReviveEquips || bSaveMusic ||
               bUserToggledFastIntro;
    }
}