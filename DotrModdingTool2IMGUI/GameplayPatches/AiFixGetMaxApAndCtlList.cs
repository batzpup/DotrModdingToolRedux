using GameplayPatches;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GameplayPatches
{
    public class AiFixGetMaxApAndCtlList : Patch
    {
        static int TaLogic_GetUnitCtlLst_fix = 0x24C200;
        static int TaLogic_GetMaxApUnit = 0x24B750;



        public override bool IsApplied()
        {
            return dataAccess.CheckIfPatchApplied(TaLogic_GetUnitCtlLst_fix, new byte[4] { 0x06, 0x00, 0x11, 0x24 });
        }

        protected override void Apply()
        {
            dataAccess.ApplyPatch(TaLogic_GetUnitCtlLst_fix, new byte[4] { 0x06, 0x00, 0x11, 0x24 });
            dataAccess.ApplyPatch(TaLogic_GetMaxApUnit, new byte[240] { 0x90, 0xFF, 0xBD, 0x27, 0x60, 0x00, 0xBF, 0x7F, 0x50, 0x00, 0xB5, 0x7F, 0x40, 0x00, 0xB4, 0x7F, 0x30, 0x00, 0xB3, 0x7F, 0x20, 0x00, 0xB2, 0x7F, 0x10, 0x00, 0xB1, 0x7F, 0x00, 0x00, 0xB0, 0x7F, 0xFF, 0xFF, 0x11, 0x24, 0x28, 0xA6, 0x80, 0x70, 0x00, 0x00, 0x10, 0x24, 0x9C, 0xF1, 0x09, 0x0C, 0x28, 0x96, 0x20, 0x72, 0x25, 0xF0, 0x40, 0x00, 0x01, 0x00, 0x41, 0x28, 0x22, 0x00, 0x20, 0x14, 0x28, 0x16, 0x40, 0x72, 0x00, 0x00, 0x93, 0x26, 0x00, 0x00, 0x62, 0x96, 0xFF, 0x00, 0x57, 0x30, 0x17, 0x00, 0xE0, 0x12, 0x00, 0x00, 0x00, 0x00, 0x03, 0x22, 0x02, 0x00, 0x24, 0x84, 0x07, 0x0C, 0xFF, 0x00, 0x45, 0x30, 0x28, 0xAE, 0x40, 0x70, 0x00, 0x00, 0x62, 0x96, 0x04, 0x00, 0x06, 0x24, 0x03, 0x22, 0x02, 0x00, 0x40, 0x88, 0x07, 0x0C, 0xFF, 0x00, 0x45, 0x30, 0x0D, 0x00, 0x40, 0x50, 0x02, 0x00, 0x73, 0x26, 0x00, 0x00, 0x62, 0x96, 0xFF, 0x00, 0xA6, 0x32, 0x03, 0x3A, 0x15, 0x00, 0x03, 0x22, 0x02, 0x00, 0x78, 0x42, 0x09, 0x0C, 0xFF, 0x00, 0x45, 0x30, 0x2A, 0x08, 0x22, 0x02, 0x03, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x96, 0x28, 0x8E, 0x40, 0x70, 0x02, 0x00, 0x73, 0x26, 0x01, 0x00, 0x10, 0x26, 0x2A, 0x10, 0x1E, 0x02, 0xE2, 0xFF, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x28, 0x16, 0x40, 0x72, 0x60, 0x00, 0xBF, 0x7B, 0x50, 0x00, 0xB5, 0x7B, 0x40, 0x00, 0xB4, 0x7B, 0x30, 0x00, 0xB3, 0x7B, 0x20, 0x00, 0xB2, 0x7B, 0x10, 0x00, 0xB1, 0x7B, 0x00, 0x00, 0xB0, 0x7B, 0x08, 0x00, 0xE0, 0x03, 0x70, 0x00, 0xBD, 0x27, 0x00, 0x00, 0x00, 0x00 });

        }

        protected override void Remove()
        {
            dataAccess.ApplyPatch(TaLogic_GetUnitCtlLst_fix , new byte[4] { 0x0b, 0x00, 0x11, 0x24 });
            dataAccess.ApplyPatch(TaLogic_GetMaxApUnit, new byte[240] { 0x90, 0xFF, 0xBD, 0x27, 0x60, 0x00, 0xBF, 0x7F, 0x50, 0x00, 0xB5, 0x7F, 0x40, 0x00, 0xB4, 0x7F, 0x30, 0x00, 0xB3, 0x7F, 0x20, 0x00, 0xB2, 0x7F, 0x10, 0x00, 0xB1, 0x7F, 0x00, 0x00, 0xB0, 0x7F, 0xFF, 0xFF, 0x11, 0x24, 0x28, 0xA6, 0x80, 0x70, 0x01, 0x00, 0x10, 0x24, 0x9C, 0xF1, 0x09, 0x0C, 0x28, 0x96, 0x20, 0x72, 0x02, 0x00, 0x41, 0x28, 0x22, 0x00, 0x20, 0x14, 0x28, 0x16, 0x40, 0x72, 0x02, 0x00, 0x93, 0x26, 0x00, 0x00, 0x62, 0x96, 0x03, 0x22, 0x02, 0x00, 0x24, 0x84, 0x07, 0x0C, 0xFF, 0x00, 0x45, 0x30, 0x28, 0xAE, 0x40, 0x70, 0x00, 0x00, 0x62, 0x96, 0x04, 0x00, 0x06, 0x24, 0x03, 0x22, 0x02, 0x00, 0x40, 0x88, 0x07, 0x0C, 0xFF, 0x00, 0x45, 0x30, 0x0D, 0x00, 0x40, 0x50, 0x02, 0x00, 0x73, 0x26, 0x00, 0x00, 0x62, 0x96, 0xFF, 0x00, 0xA6, 0x32, 0x03, 0x3A, 0x15, 0x00, 0x03, 0x22, 0x02, 0x00, 0x78, 0x42, 0x09, 0x0C, 0xFF, 0x00, 0x45, 0x30, 0x2A, 0x08, 0x22, 0x02, 0x03, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x96, 0x28, 0x8E, 0x40, 0x70, 0x02, 0x00, 0x73, 0x26, 0x01, 0x00, 0x10, 0x26, 0x9C, 0xF1, 0x09, 0x0C, 0x28, 0x26, 0x80, 0x72, 0x2A, 0x10, 0x02, 0x02, 0xE3, 0xFF, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x16, 0x40, 0x72, 0x60, 0x00, 0xBF, 0x7B, 0x50, 0x00, 0xB5, 0x7B, 0x40, 0x00, 0xB4, 0x7B, 0x30, 0x00, 0xB3, 0x7B, 0x20, 0x00, 0xB2, 0x7B, 0x10, 0x00, 0xB1, 0x7B, 0x00, 0x00, 0xB0, 0x7B, 0x08, 0x00, 0xE0, 0x03, 0x70, 0x00, 0xBD, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
        }
    }
}
